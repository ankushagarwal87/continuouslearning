<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://ankushagarwal87.github.io/continuouslearning/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ankushagarwal87.github.io/continuouslearning/" rel="alternate" type="text/html" /><updated>2020-07-26T13:50:31-05:00</updated><id>https://ankushagarwal87.github.io/continuouslearning/feed.xml</id><title type="html">continuouslearning</title><subtitle>An easy to use blogging platform with support for Jupyter Notebooks.</subtitle><entry><title type="html">DNS &amp;amp; Route 53</title><link href="https://ankushagarwal87.github.io/continuouslearning/aws/dns/route%2053/2020/07/24/Domain-Name-System-(DNS)-and-Amazon-Route-53.html" rel="alternate" type="text/html" title="DNS &amp; Route 53" /><published>2020-07-24T00:00:00-05:00</published><updated>2020-07-24T00:00:00-05:00</updated><id>https://ankushagarwal87.github.io/continuouslearning/aws/dns/route%2053/2020/07/24/Domain-Name-System-(DNS)-and-Amazon-Route-53</id><content type="html" xml:base="https://ankushagarwal87.github.io/continuouslearning/aws/dns/route%2053/2020/07/24/Domain-Name-System-(DNS)-and-Amazon-Route-53.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-07-24-Domain Name System (DNS) and Amazon Route 53.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Domain-Name-System-(DNS)-Concepts&quot;&gt;Domain Name System (DNS) Concepts&lt;a class=&quot;anchor-link&quot; href=&quot;#Domain-Name-System-(DNS)-Concepts&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Top-Level Domains (TLDs)
    A Top-Level Domain (TLD) is the most general part of the domain. 
    The TLD is the farthest portion to the right (as separated by a dot). 
    Common TLDs are .com, .net, .org, .gov, .edu, and .io.

 Domain Names
     Each domain name becomes registered in a central database, known as the WhoIS database.

 IP Addresses
 Hosts
 Subdomains
 Fully Qualified Domain Name (FQDN)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;/continuouslearning/images/copied_from_nb/my_icons/DNS.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Name Servers
    A name server is a computer designated to translate domain names into IP addresses.
Zone Files
    A zone file is a simple text file that contains the mappings between domain names and IP addresses.
Top-Level Domain (TLD) Name Registrars&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Amazon-Route-53-Overview&quot;&gt;Amazon Route 53 Overview&lt;a class=&quot;anchor-link&quot; href=&quot;#Amazon-Route-53-Overview&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Amazon Route 53 is a highly available and scalable cloud DNS web service
Amazon Route 53 performs three main functions:
    Domain registration
    DNS service
    Health checking
When you create a resource record set, you choose a routing policy, which determines how Amazon Route 53
    responds to queries. 
Routing policy options are simple, weighted, latency-based, failover, and geolocation.
Routing policies can be associated with health checks, so resource health status is considered before it 
    even becomes a candidate in a conditional decision tree.

Simple
This is the default routing policy when you create a new resource. 
Use a simple routing policy when you have a single resource that performs a given function for your domain

Weighted
With weighted DNS, you can associate multiple resources (such as Amazon Elastic Compute Cloud [Amazon EC2]
    instances or Elastic Load Balancing load balancers) with a single DNS name.

Latency-Based
Latency-based routing allows you to route your traffic based on the lowest network latency for your end 
    user (for example, using the AWS region that will give them the fastest response time).

Failover
Use a failover routing policy to configure active-passive failover, in which one resource takes all the 
    traffic when it’s available and the other resource takes all the traffic when the first resource 
    isn’t available.

Geolocation
Geolocation routing lets you choose where Amazon Route 53 will send your traffic based on the 
    geographic location of your users (the location from which DNS queries originate). &lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Ankush Agarwal</name></author><summary type="html"></summary></entry><entry><title type="html">Amazon ElastiCache</title><link href="https://ankushagarwal87.github.io/continuouslearning/aws/elasticache/2020/07/24/Amazon-ElastiCache.html" rel="alternate" type="text/html" title="Amazon ElastiCache" /><published>2020-07-24T00:00:00-05:00</published><updated>2020-07-24T00:00:00-05:00</updated><id>https://ankushagarwal87.github.io/continuouslearning/aws/elasticache/2020/07/24/Amazon-ElastiCache</id><content type="html" xml:base="https://ankushagarwal87.github.io/continuouslearning/aws/elasticache/2020/07/24/Amazon-ElastiCache.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-07-24-Amazon ElastiCache.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Amazon-ElastiCache&quot;&gt;Amazon ElastiCache&lt;a class=&quot;anchor-link&quot; href=&quot;#Amazon-ElastiCache&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;With Amazon ElastiCache, you can choose from a Memcached or Redis protocol-compliant cache engine and 
    quickly launch a cluster within minutes.
Memcached provides a very simple interface that allows you to write and read objects into 
    in-memory key/value data stores.
With Amazon ElastiCache, you can elastically grow and shrink a cluster of Memcached nodes to meet your 
    demands. 
You can partition your cluster into shards and support parallelized operations for very high 
    performance throughput. 

Memcached deals with objects as blobs that can be retrieved using a unique key.
Unlike Memcached, Redis supports the ability to persist the in-memory data onto disk. 
This allows you to create snapshots that back up your data and then recover or replicate from the backups.
Redis clusters also can support up to five read replicas to offload read requests. 
In the event of failure of the primary node, a read replica can be promoted and become the new master 
    using Multi-AZ replication groups.
Redis also has advanced features that make it easy to sort and rank data.
A single Memcached cluster can contain up to 20 nodes. 
Redis clusters are always made up of a single node; however, multiple clusters can be grouped into a 
    Redis replication group.

Horizontal Scaling 
Amazon ElastiCache also adds additional functionality that allows you to scale horizontally the size of 
    your cache environment. 
This functionality differs depending on the cache engine you have selected. 
With Memcached, you can partition your data and scale horizontally to 20 nodes or more. 
With Auto Discovery, your application can discover Memcached nodes that are added or removed from a cluster
While you can only have one node handling write commands, you can have up to five read replicas 
    handling read-only requests.

Vertical Scaling
You can, however, quickly spin up a new cluster with the desired cache node types and start redirecting 
    traffic to the new cluster. 
It’s important to understand that a new Memcached cluster always starts empty, while a Redis cluster 
    can be initialized from a backup.&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Ankush Agarwal</name></author><summary type="html"></summary></entry><entry><title type="html">SQS, SWF, and SNS</title><link href="https://ankushagarwal87.github.io/continuouslearning/aws/sqs/swf/sns/2020/07/18/SQS,-SWF,-and-SNS.html" rel="alternate" type="text/html" title="SQS, SWF, and SNS" /><published>2020-07-18T00:00:00-05:00</published><updated>2020-07-18T00:00:00-05:00</updated><id>https://ankushagarwal87.github.io/continuouslearning/aws/sqs/swf/sns/2020/07/18/SQS,-SWF,-and-SNS</id><content type="html" xml:base="https://ankushagarwal87.github.io/continuouslearning/aws/sqs/swf/sns/2020/07/18/SQS,-SWF,-and-SNS.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-07-18-SQS, SWF, and SNS.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Amazon-Simple-Queue-Service-(Amazon-SQS)&quot;&gt;Amazon Simple Queue Service (Amazon SQS)&lt;a class=&quot;anchor-link&quot; href=&quot;#Amazon-Simple-Queue-Service-(Amazon-SQS)&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Amazon SQS is a fast, reliable, scalable, and fully managed message queuing service.
Amazon SQS makes it simple and cost effective to decouple the components of a cloud application.
You can use Amazon SQS to transmit any volume of data, at any level of throughput

With Amazon SQS, you can offload the administrative burden of operating and scaling a highly 
    available messaging cluster while paying a low price for only what you use.
Amazon SQS ensures delivery of each message at least once and supports multiple readers and writers 
    interacting with the same queue. 
A single queue can be used simultaneously by many distributed application components, with no need for 
    those components to coordinate with one another to share the queue. 
Although most of the time each message will be delivered to your application exactly once, 
    you should design your system to be idempotent

Amazon SQS is engineered to be highly available and to deliver messages reliably and efficiently; 
    however, the service does not guarantee First In, First Out (FIFO) delivery of messages. 
If your system requires that order be preserved, you can place sequencing information in each message 
    so that you can reorder the messages when they are retrieved from the queue.

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;/continuouslearning/images/copied_from_nb/my_icons/SQS.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Delay-Queues-and-Visibility-Timeouts&quot;&gt;Delay Queues and Visibility Timeouts&lt;a class=&quot;anchor-link&quot; href=&quot;#Delay-Queues-and-Visibility-Timeouts&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Delay Queues allow you to postpone the delivery of new messages in a queue for a specific number of seconds. 
If you create a delay queue, any message that you send to that queue will be invisible to consumers 
    for the duration of the delay period.
Amazon SQS supports up to 12 hours’ maximum visibility timeout.
By default, the message visibility timeout is set to 30 seconds
The default message retention period that can be set in Amazon SQS is four days.
The longest configurable message retention period for Amazon SQS is 14 days.&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Queue-and-Message-Identifiers&quot;&gt;Queue and Message Identifiers&lt;a class=&quot;anchor-link&quot; href=&quot;#Queue-and-Message-Identifiers&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Amazon SQS uses three identifiers that you need to be familiar with: queue URLs, message IDs, 
    and receipt handles.
Amazon SQS assigns each message a unique ID that it returns to you in the SendMessage response.
Each time you receive a message from a queue, you receive a receipt handle for that message.

Queue Operations, Unique IDs, and Metadata
Message Attributes
Long Polling
    When your application queries the Amazon SQS queue for messages, it calls the function ReceiveMessage.
        ReceiveMessage will check for the existence of a message in the queue and return immediately, 
        either with or without a message. 
    If your code makes periodic calls to the queue, this pattern is sufficient. 
    With long polling, you send a WaitTimeSeconds argument to ReceiveMessage of up to 20 seconds. 
    If there is no message in the queue, then the call will wait up to WaitTimeSeconds for a message to
        appear before returning.

Dead Letter Queues
Access Control        
    You want to grant another AWS account a particular type of access to your queue.
    You want to grant another AWS account access to your queue for a specific period of time.
    You want to grant another AWS account access to your queue only if the requests come from your 
        Amazon EC2 instances.
    You want to deny another AWS account access to your queue.

    Amazon SQS Access Control allows you to assign policies to queues that grant specific interactions 
        to other accounts without that account having to assume IAM roles from your account.

Tradeoff Message Durability and Latency
    Amazon SQS does not return success to a SendMessage API call until the message is durably stored in 
        Amazon SQS.&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Amazon-Simple-Workflow-Service-(Amazon-SWF)&quot;&gt;Amazon Simple Workflow Service (Amazon SWF)&lt;a class=&quot;anchor-link&quot; href=&quot;#Amazon-Simple-Workflow-Service-(Amazon-SWF)&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Amazon SWF makes it easy to build applications that coordinate work across distributed components. 
In Amazon SWF, a task represents a logical unit of work that is performed by a component of your 
    application. 
Coordinating tasks across the application involves managing inter-task dependencies, scheduling, and
    concurrency in accordance with the logical flow of the application. 
Amazon SWF gives you full control over implementing and coordinating tasks without worrying about
    underlying complexities such as tracking their progress and maintaining their state.

Workflows
    Using Amazon SWF, you can implement distributed, asynchronous applications as workflows. 
    Workflows coordinate and manage the execution of activities that can be run asynchronously across 
        multiple computing devices and that can feature both sequential and parallel processing.
    When designing a workflow, analyze your application to identify its component tasks, which are represented 
        in Amazon SWF as activities. 
    The workflow’s coordination logic determines the order in which activities are executed.

Workflow Domains
    Domains provide a way of scoping Amazon SWF resources within your AWS account.

Workflow History
    The workflow history is a detailed, complete, and consistent record of every event that occurred 
        since the workflow execution started.

Actors
    Amazon SWF consists of a number of different types of programmatic features known as actors. 
    Actors can be workflow starters, deciders, or activity workers. 
    These actors communicate with Amazon SWF through its API. 
    You can develop actors in any programming language.

Tasks
    Amazon SWF provides activity workers and deciders with work assignments, given as one of three 
        types of tasks: activity tasks, AWS Lambda tasks, and decision tasks.

Task Lists
    Task lists provide a way of organizing the various tasks associated with a workflow. 

Long Polling
    Deciders and activity workers communicate with Amazon SWF using long polling&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Amazon-Simple-Notification-Service-(Amazon-SNS)&quot;&gt;Amazon Simple Notification Service (Amazon SNS)&lt;a class=&quot;anchor-link&quot; href=&quot;#Amazon-Simple-Notification-Service-(Amazon-SNS)&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Amazon SNS follows the publish-subscribe (pub-sub) messaging paradigm, with notifications being delivered 
    to clients using a push mechanism that eliminates the need to check periodically (or poll) for 
    new information and updates
You can use Amazon SNS to send Short Message Service (SMS) messages to mobile device users in the United 
    States or to email recipients worldwide.

Common Amazon SNS Scenarios
    Fanout
    Application and System Alerts
    Push Email and Text Messaging
    Mobile Push Notifications&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Ankush Agarwal</name></author><summary type="html"></summary></entry><entry><title type="html">HashiCorp</title><link href="https://ankushagarwal87.github.io/continuouslearning/hashicorp/2020/07/12/HashiCorp.html" rel="alternate" type="text/html" title="HashiCorp" /><published>2020-07-12T00:00:00-05:00</published><updated>2020-07-12T00:00:00-05:00</updated><id>https://ankushagarwal87.github.io/continuouslearning/hashicorp/2020/07/12/HashiCorp</id><content type="html" xml:base="https://ankushagarwal87.github.io/continuouslearning/hashicorp/2020/07/12/HashiCorp.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-07-12-HashiCorp.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;&lt;img src=&quot;/continuouslearning/images/copied_from_nb/my_icons/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Steps&quot;&gt;Steps&lt;a class=&quot;anchor-link&quot; href=&quot;#Steps&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Options
    CLI Command
    API call
    Web UI

Step 1: Configure Transit Secrets Engine
Step 2: Encrypt Secrets
Step 3: Decrypt ciphertext
Step 4: Rotate the Encryption Key
Step 5: Update Key Configuration
Step 6: Generate Data Key
    Can call API to get encypted key &amp;amp; decrypt the file (no need of sending entire file)

Vault HTTP API imposes a maximum request size of 32MB to prevent a denial of service attack. 
This can be tuned per listener block in the Vault server configuration.


Question
    Why don't have own method of encryption/decryption rather then on service
    How hashicorp validate user (who is asking for key or encrypt/decrypt request)
        https://www.youtube.com/watch?v=lZnrrGxrInk&amp;amp;feature=emb_rel_end
    Do we really need to encrypt data when there is option of delete post processing
    If two files comes at the same time - How ABC will work
    Is single instance work on API/File Integration
    Can we not have FTP connector in the end to send file
        Output Port need to be open 
    Email Connector


Reference
    https://learn.hashicorp.com/vault/encryption-as-a-service/eaas-transit
    https://www.vaultproject.io/api-docs/secret/transit
    https://www.hashicorp.com/blog/how-vault-encrypts-application-data-during-transit-and-at-rest/
    https://www.hashicorp.com/resources/encryption-as-a-service-with-vault-s-transit-secret-engine/


Options
    We can have lambda function trigger when file comes to S3 
    Lambda function will dcrypt &amp;amp; again save to S3 
    Trigger ABC on S3


AWS Integration
    https://www.vaultproject.io/docs/auth/aws
    https://www.vaultproject.io/api/auth/aws
    IAM auth method
        The AWS STS API includes a method, sts:GetCallerIdentity, which allows you to validate the identity 
        of a client. The client signs a GetCallerIdentity query using the AWS Signature v4 algorithm 
        and sends it to the Vault server. The credentials used to sign the GetCallerIdentity request 
        can come from the EC2 instance metadata service for an EC2 instance, or from the AWS environment
        variables in an AWS Lambda function execution, which obviates the need for an operator to manually
        provision some sort of identity material first. However, the credentials can, in principle, come 
        from anywhere, not just from the locations AWS has provided for you.

        AWS Security Token Service (AWS STS) is a web service that enables you to request temporary, 
        limited-privilege credentials for AWS Identity and Access Management (IAM) users

        GetCallerIdentity
            Returns details about the IAM user or role whose credentials are used to call the operation. 
            https://docs.aws.amazon.com/STS/latest/APIReference/API_GetCallerIdentity.html

    EC2 auth method
        Amazon EC2 instances have access to metadata which describes the instance. 
        The Vault EC2 auth method leverages the components of this metadata to authenticate and 
            distribute an initial Vault token to an EC2 instance.

ABC
    An enterprise-level FTP Client is included in the Core edition, which provides an intuitive
    browser-based administrator, extensive security features, user management, file triggers, and 
    detailed audit trails.

Lambda
    https://docs.aws.amazon.com/lambda/latest/dg/with-s3.html&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Ankush Agarwal</name></author><summary type="html"></summary></entry><entry><title type="html">Databases and AWS</title><link href="https://ankushagarwal87.github.io/continuouslearning/aws/databases/2020/07/11/Databases-and-AWS.html" rel="alternate" type="text/html" title="Databases and AWS" /><published>2020-07-11T00:00:00-05:00</published><updated>2020-07-11T00:00:00-05:00</updated><id>https://ankushagarwal87.github.io/continuouslearning/aws/databases/2020/07/11/Databases-and-AWS</id><content type="html" xml:base="https://ankushagarwal87.github.io/continuouslearning/aws/databases/2020/07/11/Databases-and-AWS.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-07-11-Databases and AWS.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Introduction&quot;&gt;Introduction&lt;a class=&quot;anchor-link&quot; href=&quot;#Introduction&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Amazon RDS provides support for six popular relational database engines: 
    MySQL, Oracle, PostgreSQL, Microsoft SQL Server, MariaDB, and Amazon Aurora
Amazon Redshift is a high-performance data warehouse designed specifically for OLAP use cases.
Traditional relational databases are difficult to scale beyond a single server without significant 
    engineering and cost, but a NoSQL architecture allows for horizontal scalability on commodity hardware.
Amazon RDS makes it easy to replicate your data to increase availability, improve durability, or scale 
    up or beyond a single database instance for read-heavy database workloads.&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;RDS&quot;&gt;RDS&lt;a class=&quot;anchor-link&quot; href=&quot;#RDS&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Amazon RDS MySQL,PostgreSQL,MariaDB,Oracle,Microsoft SQL Server supports Multi-AZ deployments for 
    high availability and read replicas for horizontal scaling
Amazon Aurora can deliver up to five times the performance of MySQL without requiring changes to most 
    of your existing web applications. 
An Amazon Aurora DB cluster consists of two different types of instances:
    Primary Instance 
        This is the main instance, which supports both read and write workloads. 
        When you modify your data, you are modifying the primary instance. 
        Each Amazon Aurora DB cluster has one primary instance.
    Amazon Aurora Replica 
        This is a secondary instance that supports only read operations. 
        Each DB cluster can have up to 15 Amazon Aurora Replicas in addition to the primary instance.
        By using multiple Amazon Aurora Replicas, you can distribute the read workload among various 
            instances, increasing performance. 
        You can also locate your Amazon Aurora Replicas in multiple Availability Zones to increase 
            your database availability.&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Storage-Options&quot;&gt;Storage Options&lt;a class=&quot;anchor-link&quot; href=&quot;#Storage-Options&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Amazon RDS is built using Amazon Elastic Block Store (Amazon EBS) and allows you to select the right 
    storage option based on your performance and cost requirements. 
Depending on the database engine and workload, you can scale up to 4 to 6TB in provisioned storage 
    and up to 30,000 IOPS. 
Amazon RDS supports three storage types: Magnetic, General Purpose (Solid State Drive [SSD]), 
    and Provisioned IOPS (SSD)

Magnetic Magnetic storage, also called standard storage, offers cost-effective storage that is ideal 
    for applications with light I/O requirements.
General Purpose (SSD) General purpose (SSD)-backed storage, also called gp2, can provide faster access 
    than magnetic storage. This storage type can provide burst performance to meet spikes and is excellent 
    for small- to medium-sized databases.
Provisioned IOPS (SSD) Provisioned IOPS (SSD) storage is designed to meet the needs of I/O-intensive 
    workloads, particularly database workloads, that are sensitive to storage performance and consistency 
    in random access I/O throughput.&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Backup-and-Recovery&quot;&gt;Backup and Recovery&lt;a class=&quot;anchor-link&quot; href=&quot;#Backup-and-Recovery&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;RPO is defined as the maximum period of data loss that is acceptable in the event of a failure or incident
RTO is defined as the maximum amount of downtime that is permitted to recover from backup and to 
    resume processing

Automated Backups
    An automated backup is an Amazon RDS feature that continuously tracks changes and backs up your database
    One day of backups will be retained by default, but you can modify the retention period up to a 
        maximum of 35 days
Manual DB Snapshots
    In addition to automated backups, you can perform manual DB snapshots at any time. 
    Unlike automated snapshots that are deleted after the retention period, manual DB snapshots are 
        kept until you explicitly delete them with the Amazon RDS console or the DeleteDBSnapshot action.
    You cannot restore from a DB snapshot to an existing DB Instance; a new DB Instance is created when 
        you restore. 
    When you restore a DB Instance, only the default DB parameter and security groups are associated 
        with the restored instance. &lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;High-Availability-with-Multi-AZ&quot;&gt;High Availability with Multi-AZ&lt;a class=&quot;anchor-link&quot; href=&quot;#High-Availability-with-Multi-AZ&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Multi-AZ allows you to place a secondary copy of your database in another Availability Zone for 
    disaster recovery purposes
Amazon RDS automatically replicates the data from the master database or primary instance to the 
    slave database or secondary instance using synchronous replication.
To improve database performance using multiple DB Instances, use read replicas or other DB caching 
    technologies such as Amazon ElastiCache.&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Scaling-Up-and-Out&quot;&gt;Scaling Up and Out&lt;a class=&quot;anchor-link&quot; href=&quot;#Scaling-Up-and-Out&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Vertical Scalability
    Storage expansion is supported for all of the database engines except for SQL Server.
Horizontal Scalability with Partitioning
    A relational database can be scaled vertically only so much before you reach the maximum instance size.
    Partitioning a large relational database into multiple instances or shards is a common technique 
        for handling more requests beyond the capabilities of a single instance.
    The application needs to decide how to route database requests to the correct shard and becomes 
        limited in the types of queries that can be performed across server boundaries.
    NoSQL databases like Amazon DynamoDB or Cassandra are designed to scale horizontally.
Horizontal Scalability with Read Replicas
    Another important scaling technique is to use read replicas to offload read transactions from the 
        primary database and increase the overall number of transactions
    Read replicas are currently supported in Amazon RDS for MySQL, PostgreSQL, MariaDB and Amazon Aurora&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Security&quot;&gt;Security&lt;a class=&quot;anchor-link&quot; href=&quot;#Security&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Protect access to your infrastructure resources using AWS Identity and Access Management (IAM) policies 
    that limit which actions AWS administrators can perform
Another security best practice is to deploy your Amazon RDS DB Instances into a private subnet within 
    an Amazon Virtual Private Cloud (Amazon VPC) that limits network access to the DB Instance. 
Restrict network access using network Access Control Lists (ACLs) and security groups to limit inbound 
    traffic to a short list of source IP addresses.
At the database level, you will also need to create users and grant them permissions to read and write 
    to your databases. 
Access to the database is controlled using the database engine-specific access control and user 
    management mechanisms
Finally, protect the confidentiality of your data in transit and at rest with multiple encryption 
    capabilities provided with Amazon RDS.
You can securely connect a client to a running DB Instance using Secure Sockets Layer (SSL) to protect 
    data in transit. 
Encryption at rest is possible for all engines using the Amazon Key Management Service (KMS) or 
    Transparent Data Encryption (TDE). 
All logs, backups, and snapshots are encrypted for an encrypted Amazon RDS instance.&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Amazon-Redshift&quot;&gt;Amazon Redshift&lt;a class=&quot;anchor-link&quot; href=&quot;#Amazon-Redshift&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Amazon Redshift is a fast, powerful, fully managed, petabyte-scale data warehouse service in the cloud. 
Amazon Redshift is a relational database designed for OLAP scenarios and optimized for high-performance
    analysis and reporting of very large datasets. 
Amazon Redshift is based on industry-standard PostgreSQL, so most existing SQL client applications 
    will work with only minimal changes.
The key component of an Amazon Redshift data warehouse is a cluster. 
A cluster is composed of a leader node and one or more compute nodes. 
The client application interacts directly only with the leader node, and the compute nodes are transparent 
    to external applications.
The six node types are grouped into two categories: Dense Compute and Dense Storage. 
The Dense Compute node types support clusters up to 326TB using fast SSDs, while the Dense Storage 
    nodes support clusters up to 2PB using large magnetic disks
When you submit a query, Amazon Redshift distributes and executes the query in parallel across all of 
    a cluster’s compute nodes. 
Amazon Redshift also spreads your table data across all compute nodes in a cluster based on a 
    distribution strategy that you specify

Table Design
    Data Types
    Compression Encoding
    Distribution Strategy
        EVEN distribution  
            This is the default option and results in the data being distributed across the slices 
                in a uniform fashion regardless of the data.
        KEY distribution  
            With KEY distribution, the rows are distributed according to the values in one column. 
            The leader node will store matching values close together and increase query performance 
                for joins.
        ALL distribution  
            With ALL, a full copy of the entire table is distributed to every node. 
            This is useful for lookup tables and other large tables that are not updated frequently.
    Sort Keys

Loading Data
     COPY
Querying Data
Snapshots
Security&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Amazon-DynamoDB&quot;&gt;Amazon DynamoDB&lt;a class=&quot;anchor-link&quot; href=&quot;#Amazon-DynamoDB&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;To help maintain consistent, fast performance levels, all table data is stored on high-performance 
    SSD disk drives. 
Performance metrics, including transactions rates, can be monitored using Amazon CloudWatch.
In addition to providing high-performance levels, Amazon DynamoDB also provides automatic high-availability 
    and durability protections by replicating data across multiple Availability Zones within an AWS Region.
DynamoDB provides a web service API that accepts requests in JSON format.&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Data-Types&quot;&gt;Data Types&lt;a class=&quot;anchor-link&quot; href=&quot;#Data-Types&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Scalar Data Types 
    A scalar type represents exactly one value. 
    Amazon DynamoDB supports the following five scalar types:
        String Text and variable length characters up to 400KB. Supports Unicode with UTF8 encoding
        Number Positive or negative number with up to 38 digits of precision
        Binary Binary data, images, compressed objects up to 400KB in size
        Boolean Binary flag representing a true or false value
        Null Represents a blank, empty, or unknown state. String, Number, Binary, Boolean cannot be empty.

Set Data Types 
    Sets are useful to represent a unique list of one or more scalar values. 
    Each value in a set needs to be unique and must be the same data type. 
    Sets do not guarantee order. 
    Amazon DynamoDB supports three set types: String Set, Number Set, and Binary Set.
        String Set Unique list of String attributes
        Number Set Unique list of Number attributes
        Binary Set Unique list of Binary attributes

Document Data Types 
    Document type is useful to represent multiple nested attributes, similar to the structure of a JSON file
    Amazon DynamoDB supports two document types: List and Map. 
    Multiple Lists and Maps can be combined and nested to create complex structures.
        List Each List can be used to store an ordered list of attributes of different data types.
        Map Each Map can be used to store an unordered list of key/value pairs. &lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Primary-Key&quot;&gt;Primary Key&lt;a class=&quot;anchor-link&quot; href=&quot;#Primary-Key&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;When you create a table, you must specify the primary key of the table in addition to the table name. 
Amazon DynamoDB supports two types of primary keys, and this configuration cannot be changed after a 
    table has been created:

    Partition Key 
        The primary key is made of one attribute, a partition (or hash) key. 
        Amazon DynamoDB builds an unordered hash index on this primary key attribute.
    Partition and Sort Key 
        The primary key is made of two attributes. 
        The first attribute is the partition key and the second one is the sort (or range) key. 
        Each item in the table is uniquely identified by the combination of its partition and sort key value
        It is possible for two items to have the same partition key value, but those two items must 
            have different sort key values.&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Provisioned-Capacity&quot;&gt;Provisioned Capacity&lt;a class=&quot;anchor-link&quot; href=&quot;#Provisioned-Capacity&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;When you create an Amazon DynamoDB table, you are required to provision a certain amount of read and 
    write capacity to handle your expected workloads. 
Based on your configuration settings, DynamoDB will then provision the right amount of infrastructure
    capacity to meet your requirements with sustained, low-latency response times&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Secondary-Indexes&quot;&gt;Secondary Indexes&lt;a class=&quot;anchor-link&quot; href=&quot;#Secondary-Indexes&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;When you create a table with a partition and sort key (formerly known as a hash and range key), you can
    optionally define one or more secondary indexes on that table. 
A secondary index lets you query the data in the table using an alternate key, in addition to queries
    against the primary key. 

Amazon DynamoDB supports two different kinds of indexes:
    Global Secondary Index 
        The global secondary index is an index with a partition and sort key that can be different 
            from those on the table. 
        You can create or delete a global secondary index on a table at any time.
    Local Secondary Index 
        The local secondary index is an index that has the same partition key attribute as the primary key 
            of the table, but a different sort key. 
        You can only create a local secondary index when you create a table.&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Writing-and-Reading-Data&quot;&gt;Writing and Reading Data&lt;a class=&quot;anchor-link&quot; href=&quot;#Writing-and-Reading-Data&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Writing Items
    Amazon DynamoDB provides three primary API actions to create, update, and delete items: 
        PutItem, UpdateItem, and DeleteItem
Reading Items
    After an item has been created, it can be retrieved through a direct lookup by calling the 
        GetItem action or through a search using the Query or Scan action&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Ankush Agarwal</name></author><summary type="html"></summary></entry><entry><title type="html">AWS Identity and Access Management (IAM)</title><link href="https://ankushagarwal87.github.io/continuouslearning/aws/iam/2020/07/08/AWS-Identity-and-Access-Management-(IAM).html" rel="alternate" type="text/html" title="AWS Identity and Access Management (IAM)" /><published>2020-07-08T00:00:00-05:00</published><updated>2020-07-08T00:00:00-05:00</updated><id>https://ankushagarwal87.github.io/continuouslearning/aws/iam/2020/07/08/AWS-Identity-and-Access-Management-(IAM)</id><content type="html" xml:base="https://ankushagarwal87.github.io/continuouslearning/aws/iam/2020/07/08/AWS-Identity-and-Access-Management-(IAM).html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-07-08-AWS Identity and Access Management (IAM).ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Introduction&quot;&gt;Introduction&lt;a class=&quot;anchor-link&quot; href=&quot;#Introduction&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;IAM uses traditional identity concepts such as users, groups, and access control policies to control who 
    can use your AWS account, what services and resources they can use, and how they can use them. 
The control provided by IAM is granular enough to limit a single user to the ability to perform a single 
    action on a specific resource from a specific IP address during a specific time window. 
Applications can be granted access to AWS resources whether they are running on-premises or in the cloud. 

If your application identities are based on Active Directory, your on-premises Active Directory can be 
    extended into the cloud to continue to fill that need. 
A great solution for using Active Directory in the cloud is AWS Directory Service, which is an Active
    Directory-compatible directory service that can work on its own or integrate with your on-premises 
    Active Directory. 
Finally, if you are working with a mobile app, consider Amazon Cognito for identity management for 
    mobile applications.

Operating System Access - Active Directory LDAP Machine-specific accounts
Application Access - Active Directory, Application User Repositories, Amazon Cognito
AWS Resources - IAM

IAM is controlled like most other AWS Cloud services:
    AWS Management Console
    CLI
    AWS SDK&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Principals&quot;&gt;Principals&lt;a class=&quot;anchor-link&quot; href=&quot;#Principals&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;The first IAM concept to understand is principals. 
A principal is an IAM entity that is allowed to interact with AWS resources. 
A principal can be permanent or temporary, and it can represent a human or an application. 
There are three types of principals: root users, IAM users, and roles/temporary security tokens.

Root User
    When you first create an AWS account, you begin with only a single sign-in principal that has complete
        access to all AWS Cloud services and resources in the account. 
    This principal is called the root user. As long as you have an open account with AWS, the root user 
        for that relationship will persist. 
    The root user can be used for both console and programmatic access to AWS resources.

IAM Users
    Users are persistent identities set up through the IAM service to represent individual people 
        or applications. 
    You may create separate IAM users for each member of your operations team so they can interact 
        with the console and use the CLI.

Roles/Temporary Security Tokens
    Roles are used to grant specific privileges to specific actors for a set duration of time. 
    These actors can be authenticated by AWS or some trusted external system. 
    When one of these actors assumes a role, AWS provides the actor with a temporary security token 
        from the AWS Security Token Service (STS) that the actor can use to access AWS Cloud services. 

    Amazon EC2 Roles—Granting permissions to applications running on an Amazon EC2 instance.
    Cross-Account Access—Granting permissions to users from other AWS accounts, whether you 
        control those accounts or not.
    Federation—Granting permissions to users authenticated by a trusted external system.

    Amazon EC2 Roles
        Suppose that an application running on an Amazon EC2 instance needs to access an Amazon Simple 
            Storage Service (Amazon S3) bucket. 
        A policy granting permission to read and write that bucket can be created and assigned to an IAM 
            user,and the application can use the access key for that IAM user to access the Amazon S3 bucket
        The problem with this approach is that the access key for the user must be accessible to the
            application, probably by storing it in some sort of configuration file. 

        An alternative is to create an IAM role that grants the required access to the Amazon S3 bucket. 
        When the Amazon EC2 instance is launched, the role is assigned to the instance. 
        When the application running on the instance uses the Application Programming Interface (API) to 
            access the Amazon S3 bucket, it assumes the role assigned to the instance and obtains a 
            temporary token that it sends to the API. 

    Cross-Account Access
        Another common use case for IAM roles is to grant access to AWS resources to IAM users in other 
            AWS accounts

    Federation
        Many organizations already have an identity repository outside of AWS and would rather leverage 
            that repository than create a new and largely duplicate repository of IAM users. 
        Similarly, web-based applications may want to leverage web-based identities such as Facebook, 
            Google, or Login with Amazon. 
        IAM Identity Providers provide the ability to federate these outside identities with IAM and 
            assign privileges to those users authenticated outside of IAM.
        IAM can integrate with two different types of outside Identity Providers (IdP). 
        For federating web identities such as Facebook, Google, or Login with Amazon, IAM supports 
            integration via OpenID Connect (OIDC).
        For federating internal identities, such as Active Directory or LDAP, IAM supports integration 
            via Security Assertion Markup Language 2.0 (SAML). 
        A SAML-compliant IdP such as Active Directory Federation Services (ADFS) is used to federate the
            internal directory to IAM. 
        In each case, federation works by returning a temporary token associated with a role to the IdP 
            for the authenticated identity to use for calls to the AWS API.&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Authentication&quot;&gt;Authentication&lt;a class=&quot;anchor-link&quot; href=&quot;#Authentication&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;There are three ways that IAM authenticates a principal:
User Name/Password
    When a principal represents a human interacting with the console, the human will provide a user
        name/password pair to verify their identity. 
    IAM allows you to create a password policy enforcing password complexity and expiration.

Access Key
    An access key is a combination of an access key ID (20 characters) and an access secret key (40
        characters). When a program is manipulating the AWS infrastructure via the API, it will use 
        these values to sign the underlying REST calls to the services. 

Access Key/Session Token
    When a process operates under an assumed role, the temporary security token provides an access key 
        for authentication. In addition to the access key (remember that it consists of two parts), 
        the token also includes a session token. 
     Calls to AWS must include both the two-part access key and the session token to authenticate.&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Authorization&quot;&gt;Authorization&lt;a class=&quot;anchor-link&quot; href=&quot;#Authorization&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;After IAM has authenticated a principal, it must then manage the access of that principal to protect your 
    AWS infrastructure. 
The process of specifying exactly what actions a principal can and cannot perform is called authorization.
Authorization is handled in IAM by defining specific privileges in policies and associating those policies 
    with principals.

Policies
    A policy is a JSON document that fully defines a set of permissions to access and manipulate 
        AWS resources. Policy documents contain one or more permissions, with each permission defining

    Effect
        A single word: Allow or Deny.

    Service
        For what service does this permission apply? Most AWS Cloud services support granting access 
            through IAM, including IAM itself.

    Resource
        The resource value specifies the specific AWS infrastructure for which this permission applies. 
        This is specified as an Amazon Resource Name (ARN). 
        The format for an ARN varies slightly between services, but the basic format is:
        &quot;arn:aws:service:region:account-id:[resourcetype:]resource&quot;

    Action
        The action value specifies the subset of actions within a service that the permission allows
            or denies. For instance, a permission may grant access to any read-based action for Amazon S3.
        A set of actions can be specified with an enumerated list or by using wildcards (Read*).

    Condition
        The condition value optionally defines one or more additional restrictions that limit the actions
            allowed by the permission. 
        For instance, the permission might contain a condition that limits the ability to access a 
            resource to calls that come from a specific IP address range. 
        Another condition could restrict the permission only to apply during a specific time interval.&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Associating-Policies-with-Principals&quot;&gt;Associating Policies with Principals&lt;a class=&quot;anchor-link&quot; href=&quot;#Associating-Policies-with-Principals&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;There are several ways to associate a policy with an IAM user; this section will only cover the most common.
A policy can be associated directly with an IAM user in one of two ways:
User Policy
    These policies exist only in the context of the user to which they are attached. 
    In the console, a user policy is entered into the user interface on the IAM user page.

Managed Policies
    These policies are created in the Policies tab on the IAM page and exist independently of any 
        individual user. 
    In this way, the same policy can be associated with many users or groups of users. 

There are two ways a policy can be associated with an IAM group:
Group Policy
    These policies exist only in the context of the group to which they are attached. 
    In the AWS Management Console, a group policy is entered into the user interface on the IAM Group page.
Managed Policies
    In the same way that managed policies can be associated with IAM users, they can also be associated 
        with IAM groups.&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Other-Key-Features&quot;&gt;Other Key Features&lt;a class=&quot;anchor-link&quot; href=&quot;#Other-Key-Features&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Multi-Factor Authentication (MFA)
Rotating Keys
    To this end, it is a security best practice to rotate access keys associated with your IAM users.
    IAM facilitates this process by allowing two active access keys at a time. 
    The process to rotate keys can be conducted via the console, CLI, or SDKs:            
        Create a new access key for the user.
        Reconfigure all applications to use the new access key.
        Disable the original access key 
        Verify the operation of all applications.
        Delete the original access key.
Resolving Multiple Permissions        
    Initially the request is denied by default.
    All the appropriate policies are evaluated; if there is an explicit “deny” found in any policy, 
        the request is denied and evaluation stops.
    If no explicit “deny” is found and an explicit “allow” is found in any policy, the request is allowed.
    If there are no explicit “allow” or “deny” permissions found, then the default “deny” is 
        maintained and the request is denied.&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Ankush Agarwal</name></author><summary type="html"></summary></entry><entry><title type="html">Amazon ELB, CloudWatch, Auto Scaling</title><link href="https://ankushagarwal87.github.io/continuouslearning/aws/elb/cloudwatch/auto%20scaling/2020/07/07/Elastic-Load-Balancing,-Amazon-CloudWatch,-and-Auto-Scaling.html" rel="alternate" type="text/html" title="Amazon ELB, CloudWatch, Auto Scaling" /><published>2020-07-07T00:00:00-05:00</published><updated>2020-07-07T00:00:00-05:00</updated><id>https://ankushagarwal87.github.io/continuouslearning/aws/elb/cloudwatch/auto%20scaling/2020/07/07/Elastic-Load-Balancing,-Amazon-CloudWatch,-and-Auto-Scaling</id><content type="html" xml:base="https://ankushagarwal87.github.io/continuouslearning/aws/elb/cloudwatch/auto%20scaling/2020/07/07/Elastic-Load-Balancing,-Amazon-CloudWatch,-and-Auto-Scaling.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-07-07-Elastic Load Balancing, Amazon CloudWatch, and Auto Scaling.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Introduction&quot;&gt;Introduction&lt;a class=&quot;anchor-link&quot; href=&quot;#Introduction&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Elastic Load Balancing is a highly available service that distributes traffic across Amazon Elastic 
    Compute Cloud (Amazon EC2) instances and includes options that provide flexibility and control 
    of incoming requests to Amazon EC2 instances.

Amazon CloudWatch is a service that monitors AWS Cloud resources and applications running on AWS. 
    It collects and tracks metrics, collects and monitors log files, and sets alarms. 
    Amazon CloudWatch has a basic level of monitoring for no cost and a more detailed level of 
    monitoring for an additional cost.

Auto Scaling is a service that allows you to maintain the availability of your applications by 
    scaling Amazon EC2 capacity up or down in accordance with conditions you set.&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Elastic-Load-Balancing&quot;&gt;Elastic Load Balancing&lt;a class=&quot;anchor-link&quot; href=&quot;#Elastic-Load-Balancing&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;The Elastic Load Balancing service allows you to distribute traffic across a group of Amazon EC2 instances 
    in one or more Availability Zones, enabling you to achieve high availability in your applications. 
Elastic Load Balancing supports routing and load balancing of Hypertext Transfer Protocol (HTTP), 
    Hypertext Transfer Protocol Secure (HTTPS), Transmission Control Protocol (TCP), and Secure Sockets 
    Layer (SSL) traffic to Amazon EC2 instances. 
Elastic Load Balancing provides a stable, single Canonical Name record (CNAME) entry point for Domain Name
    System (DNS) configuration and supports both Internet-facing and internal application-facing load
    balancers. 
Elastic Load Balancing supports health checks for Amazon EC2 instances to ensure traffic is not routed 
    to unhealthy or failing instances.&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Types-of-Load-Balancers&quot;&gt;Types of Load Balancers&lt;a class=&quot;anchor-link&quot; href=&quot;#Types-of-Load-Balancers&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Internet-Facing Load Balancers
    An Internet-facing load balancer is, as the name implies, a load balancer that takes requests from 
        clients over the Internet and distributes them to Amazon EC2 instances that are registered with 
        the load balancer.
    When you configure a load balancer, it receives a public DNS name that clients can use to send requests 
        to your application. The DNS servers resolve the DNS name to your load balancer’s public IP 
        address, which can be visible to client applications.

Internal Load Balancers
    In a multi-tier application, it is often useful to load balance between the tiers of the application. 
    You can use internal load balancers to route traffic to your Amazon EC2 instances in VPCs with 
        private subnets.

HTTPS Load Balancers
    You can create a load balancer that uses the SSL/Transport Layer Security (TLS) protocol for 
        encrypted connections (also known as SSL offload). 
    This feature enables traffic encryption between your load balancer and the clients that initiate 
        HTTPS sessions, and for connections between your load balancer and your back-end instances.&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Listeners&quot;&gt;Listeners&lt;a class=&quot;anchor-link&quot; href=&quot;#Listeners&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Every load balancer must have one or more listeners configured. 
A listener is a process that checks for connection requests—for example, a CNAME configured to the 
    A record name of the load balancer. 
Every listener is configured with a protocol and a port (client to load balancer) for a front-end 
    connection and a protocol and a port for the back-end (load balancer to Amazon EC2 instance) connection.

Elastic Load Balancing supports the following protocols:
HTTP
HTTPS
TCP
SSL

Elastic Load Balancing supports protocols operating at two different Open System Interconnection (OSI) layer
In the OSI model, Layer 4 is the transport layer that describes the TCP connection between the client 
    and your back-end instance through the load balancer. 
Layer 4 is the lowest level that is configurable for your load balancer. 
Layer 7 is the application layer that describes the use of HTTP and HTTPS connections from clients to 
    the load balancer and from the load balancer to your back-end instance.

The SSL protocol is primarily used to encrypt confidential data over insecure networks such as the Internet.
The SSL protocol establishes a secure connection between a client and the back-end server and ensures 
    that all the data passed between your client and your server is private.&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Configuring-Elastic-Load-Balancing&quot;&gt;Configuring Elastic Load Balancing&lt;a class=&quot;anchor-link&quot; href=&quot;#Configuring-Elastic-Load-Balancing&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Elastic Load Balancing allows you to configure many aspects of the load balancer, including idle 
    connection timeout, cross-zone load balancing, connection draining, proxy protocol, sticky sessions, 
    and health checks&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Amazon-CloudWatch&quot;&gt;Amazon CloudWatch&lt;a class=&quot;anchor-link&quot; href=&quot;#Amazon-CloudWatch&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Amazon CloudWatch offers either basic or detailed monitoring for supported AWS products. 
Basic monitoring sends data points to Amazon CloudWatch every five minutes for a limited number of 
    preselected metrics at no charge. 
Detailed monitoring sends data points to Amazon CloudWatch every minute and allows data aggregation for 
    an additional charge. If you want to use detailed monitoring, you must enable it—basic is the default.

Amazon CloudWatch does not aggregate data across regions but can aggregate across Availability Zones 
    within a region.

AWS provides a rich set of metrics included with each service, but you can also define custom metrics to
    monitor resources and events AWS does not have visibility into—for example, Amazon EC2 instance memory
    consumption and disk metrics that are visible to the operating system of the Amazon EC2 instance but 
    not visible to AWS or application-specific thresholds running on instances that are not known to AWS. 

Amazon CloudWatch supports an Application Programming Interface (API) that allows programs and scripts to 
    PUT metrics into Amazon CloudWatch as name-value pairs that can then be used to create events and 
    trigger alarms in the same manner as the default Amazon CloudWatch metrics.

A CloudWatch Logs agent is available that provides an automated way to send log data to CloudWatch Logs 
    for Amazon EC2 instances running Amazon Linux or Ubuntu. 
You can use the Amazon CloudWatch Logs agent installer on an existing Amazon EC2 instance to install and
    configure the CloudWatch Logs agent. 
After installation is complete, the agent confirms that it has started and it stays running until you 
    disable it.

Each AWS account is limited to 5,000 alarms per AWS account, and metrics data is retained for two weeks 
    by default (at the time of this writing). 
If you want to keep the data longer, you will need to move the logs to a persistent store like Amazon S3&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Auto-Scaling&quot;&gt;Auto Scaling&lt;a class=&quot;anchor-link&quot; href=&quot;#Auto-Scaling&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Auto Scaling is a service that allows you to scale your Amazon EC2 capacity automatically by scaling out 
    and scaling in according to criteria that you define. With Auto Scaling, you can ensure that the number 
    of running Amazon EC2 instances increases during demand spikes or peak demand periods to maintain
    application performance and decreases automatically during demand lulls or troughs to minimize costs.&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Auto-Scaling-Plans&quot;&gt;Auto Scaling Plans&lt;a class=&quot;anchor-link&quot; href=&quot;#Auto-Scaling-Plans&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Maintain Current Instance Levels
Manual Scaling
Scheduled Scaling
Dynamic Scaling
    For example, you might create a policy that adds more Amazon EC2 instances to the web tier when the 
        network bandwidth, measured by Amazon CloudWatch, reaches a certain threshold.&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Auto-Scaling-Components&quot;&gt;Auto Scaling Components&lt;a class=&quot;anchor-link&quot; href=&quot;#Auto-Scaling-Components&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Launch Configuration
    A launch configuration is the template that Auto Scaling uses to create new instances,and it is composed
        of the configuration name, Amazon Machine Image (AMI), Amazon EC2 instance type, security group, 
        and instance key pair. 
    Each Auto Scaling group can have only one launch configuration at a time.

Auto Scaling Group
    An Auto Scaling group is a collection of Amazon EC2 instances managed by the Auto Scaling service.
    Each Auto Scaling group contains configuration options that control when Auto Scaling should launch 
        new instances and terminate existing instances. 
    An Auto Scaling group can use either On-Demand or Spot Instances as the Amazon EC2 instances it manages.
    On-Demand is the default, but Spot Instances can be used by referencing a maximum bid price in the 
        launch configuration (—spot-price &quot;0.15&quot;) associated with the Auto Scaling group.

Scaling Policy
    You can associate Amazon CloudWatch alarms and scaling policies with an Auto Scaling group to adjust
        Auto Scaling dynamically. 
    When a threshold is crossed, Amazon CloudWatch sends alarms to trigger changes (scaling in or out) 
        to the number of Amazon EC2 instances currently receiving traffic behind a load balancer. 
    After the Amazon CloudWatch alarm sends a message to the Auto Scaling group, Auto Scaling executes 
        the associated policy to scale your group. 
    The policy is a set of instructions that tells Auto Scaling whether to scale out, launching new 
        Amazon EC2 instances referenced in the associated launch configuration, or to scale in and 
        terminate nstances.
    You can associate more than one scaling policy with an Auto Scaling group. 
    For example, you can create a policy using the trigger for CPU utilization, called CPULoad, and the
        CloudWatch metric CPUUtilization to specify scaling out if CPU utilization is greater than 75 
        percent for two minutes. 
    You could attach another policy to the same Auto Scaling group to scale in if CPU utilization is less 
        than 40 percent for 20 minutes.&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Ankush Agarwal</name></author><summary type="html"></summary></entry><entry><title type="html">Amazon VPC</title><link href="https://ankushagarwal87.github.io/continuouslearning/aws/vpc/2020/07/06/Amazon-Virtual-Private-Cloud-(Amazon-VPC).html" rel="alternate" type="text/html" title="Amazon VPC" /><published>2020-07-06T00:00:00-05:00</published><updated>2020-07-06T00:00:00-05:00</updated><id>https://ankushagarwal87.github.io/continuouslearning/aws/vpc/2020/07/06/Amazon-Virtual-Private-Cloud-(Amazon-VPC)</id><content type="html" xml:base="https://ankushagarwal87.github.io/continuouslearning/aws/vpc/2020/07/06/Amazon-Virtual-Private-Cloud-(Amazon-VPC).html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-07-06-Amazon Virtual Private Cloud (Amazon VPC).ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Amazon-Virtual-Private-Cloud-(Amazon-VPC)&quot;&gt;Amazon Virtual Private Cloud (Amazon VPC)&lt;a class=&quot;anchor-link&quot; href=&quot;#Amazon-Virtual-Private-Cloud-(Amazon-VPC)&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Amazon VPC is the networking layer for Amazon Elastic Compute Cloud (Amazon EC2), and it allows 
you to build your own virtual network within AWS. 
You control various aspects of your Amazon VPC, including selecting your own IP address range; 
creating your own subnets; and configuring your own route tables, network gateways, and security 
settings. Within a region, you can create multiple Amazon VPCs, and each Amazon VPC is logically 
isolated even if it shares its IP address space.

When you create an Amazon VPC, you must specify the IPv4 address range by choosing a Classless 
Inter-Domain Routing (CIDR) block, such as 10.0.0.0/16. 
The address range of the Amazon VPC cannot be changed after the Amazon VPC is created. 
An Amazon VPC address range may be as large as /16 (65,536 available addresses) or as small as /28 
(16 available addresses) and should not overlap any other network with which they are to be connected.

An Amazon VPC consists of the following components:
    Subnets
    Route tables
    Dynamic Host Configuration Protocol (DHCP) option sets
    Security groups
    Network Access Control Lists (ACLs)
An Amazon VPC has the following optional components:
    Internet Gateways (IGWs)
    Elastic IP (EIP) addresses
    Elastic Network Interfaces (ENIs)
    Endpoints
    Peering
    Network Address Translation (NATs) instances and NAT gateways
    Virtual Private Gateway (VPG), Customer Gateways (CGWs), and Virtual Private Networks (VPNs)&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Subnets&quot;&gt;Subnets&lt;a class=&quot;anchor-link&quot; href=&quot;#Subnets&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;A subnet is a segment of an Amazon VPC’s IP address range where you can launch Amazon EC2 instances, 
    Amazon Relational Database Service (Amazon RDS) databases, and other AWS resources.        
AWS reserves the first four IP addresses and the last IP address of every subnet for internal 
    networking purposes
After creating an Amazon VPC, you can add one or more subnets in each Availability Zone. 
Subnets reside within one Availability Zone and cannot span zones. 
You can, however, have multiple subnets in one Availability Zone.    

Subnets can be classified as public, private, or VPN-only. 
A public subnet is one in which the associated route table (discussed later) directs the 
    subnet’s traffic to the Amazon VPC’s IGW (also discussed later). 
A private subnet is one in which the associated route table does not direct the 
    subnet’s traffic to the Amazon VPC’s IGW. 
A VPN-only subnet is one in which the associated route table directs the 
    subnet’s traffic to the Amazon VPC’s VPG (discussed later) and does not have a route to the IGW.&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Route-Tables&quot;&gt;Route Tables&lt;a class=&quot;anchor-link&quot; href=&quot;#Route-Tables&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;A route table is a logical construct within an Amazon VPC that contains a set of rules (called routes)
    that are applied to the subnet and used to determine where network traffic is directed. 
A route table’s routes are what permit Amazon EC2 instances within different subnets within 
    an Amazon VPC to communicate with each other.
You can also use route tables to specify which subnets are public (by directing Internet 
    traffic to the IGW) and which subnets are private (by not having a route that directs 
    traffic to the IGW).
Each subnet must be associated with a route table, which controls the routing for the subnet. 
If you don’t explicitly associate a subnet with a particular route table, 
    the subnet uses the main route table.&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Internet-Gateways&quot;&gt;Internet Gateways&lt;a class=&quot;anchor-link&quot; href=&quot;#Internet-Gateways&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;An Internet Gateway (IGW) is a horizontally scaled, redundant, and highly available Amazon VPC 
    component that allows communication between instances in your Amazon VPC and the Internet. 
An IGW provides a target in your Amazon VPC route tables for Internet-routable traffic, and it 
    performs network address translation for instances that have been assigned public IP addresses.&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Dynamic-Host-Configuration-Protocol-(DHCP)-Option-Sets&quot;&gt;Dynamic Host Configuration Protocol (DHCP) Option Sets&lt;a class=&quot;anchor-link&quot; href=&quot;#Dynamic-Host-Configuration-Protocol-(DHCP)-Option-Sets&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Dynamic Host Configuration Protocol (DHCP) provides a standard for passing configuration information 
    to hosts on a TCP/IP network. 
The options field of a DHCP message contains the configuration parameters.&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Elastic-IP-Addresses-(EIPs)&quot;&gt;Elastic IP Addresses (EIPs)&lt;a class=&quot;anchor-link&quot; href=&quot;#Elastic-IP-Addresses-(EIPs)&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;AWS maintains a pool of public IP addresses in each region and makes them available for you to
    associate to resources within your Amazon VPCs. 
An Elastic IP Addresses (EIP) is a static, public IP address in the pool for the region that you 
    can allocate to your account (pull from the pool) and release (return to the pool). 
EIPs allow you to maintain a set of IP addresses that remain fixed while the underlying infrastructure
    may change over time.&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Elastic-Network-Interfaces-(ENIs)&quot;&gt;Elastic Network Interfaces (ENIs)&lt;a class=&quot;anchor-link&quot; href=&quot;#Elastic-Network-Interfaces-(ENIs)&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;An Elastic Network Interface (ENI) is a virtual network interface that you can attach to an instance
    in an Amazon VPC. 
ENIs are only available within an Amazon VPC, and they are associated with a subnet upon creation. 
They can have one public IP address and multiple private IP addresses.&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Endpoints&quot;&gt;Endpoints&lt;a class=&quot;anchor-link&quot; href=&quot;#Endpoints&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;An Amazon VPC endpoint enables you to create a private connection between your Amazon VPC and 
    another AWS service without requiring access over the Internet or through a NAT instance, 
    VPN connection, or AWS Direct Connect. 
You can create multiple endpoints for a single service, and you can use different route tables to 
    enforce different access policies from different subnets to the same service.
Amazon VPC endpoints currently support communication with Amazon Simple Storage Service (Amazon S3)&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Peering&quot;&gt;Peering&lt;a class=&quot;anchor-link&quot; href=&quot;#Peering&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;An Amazon VPC peering connection is a networking connection between two Amazon VPCs that enables 
    instances in either Amazon VPC to communicate with each other as if they are within the same network. 
You can create an Amazon VPC peering connection between your own Amazon VPCs or with an Amazon VPC in 
    another AWS account within a single region.
A peering connection is neither a gateway nor an Amazon VPN connection and does not introduce a 
    single point of failure for communication.
Peering connections do not support transitive routing&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Security-Groups&quot;&gt;Security Groups&lt;a class=&quot;anchor-link&quot; href=&quot;#Security-Groups&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;A security group is a virtual stateful firewall that controls inbound and outbound network traffic to 
    AWS resources and Amazon EC2 instances. 
All Amazon EC2 instances must be launched into a security group. 
If a security group is not specified at launch, then the instance will be launched into the default 
    security group for the Amazon VPC. 
The default security group allows communication between all resources within the security group, 
    allows all outbound traffic, and denies all other traffic

You can create up to 500 security groups for each Amazon VPC.
You can add up to 50 inbound and 50 outbound rules to each security group
You can specify allow rules, but not deny rules. 
    This is an important difference between security groups and ACLs.
You can specify separate rules for inbound and outbound traffic.
Security groups are stateful. This means that responses to allowed inbound traffic are allowed 
    to flow outbound regardless of outbound rules and vice versa. 
    This is an important difference between security groups and network ACLs.
Instances associated with the same security group can’t talk to each other unless you 
    add rules allowing it (with the exception being the default security group).&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Network-Access-Control-Lists-(ACLs)&quot;&gt;Network Access Control Lists (ACLs)&lt;a class=&quot;anchor-link&quot; href=&quot;#Network-Access-Control-Lists-(ACLs)&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;A network access control list (ACL) is another layer of security that acts as a stateless firewall 
    on a subnet level. 
A network ACL is a numbered list of rules that AWS evaluates in order, starting with the lowest 
    numbered rule, to determine whether traffic is allowed in or out of any subnet associated with 
    the network ACL. 
Amazon VPCs are created with a modifiable default network ACL associated with every subnet that 
    allows all inbound and outbound traffic. 
When you create a custom network ACL, its initial configuration will deny all inbound and 
    outbound traffic until you create rules that allow otherwise&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Network-Address-Translation-(NAT)-Instances-and-NAT-Gateways&quot;&gt;Network Address Translation (NAT) Instances and NAT Gateways&lt;a class=&quot;anchor-link&quot; href=&quot;#Network-Address-Translation-(NAT)-Instances-and-NAT-Gateways&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;If the instances within private subnets need direct access to the Internet from the Amazon VPC in 
    order to apply security updates, download patches, or update application software. 
    AWS provides NAT instances and NAT gateways to allow instances deployed in private subnets 
    to gain Internet access. 
For common use cases, we recommend that you use a NAT gateway instead of a NAT instance. 
The NAT gateway provides better availability and higher bandwidth, and requires less 
    administrative effort than NAT instances.

NAT Instance
    A network address translation (NAT) instance is an Amazon Linux Amazon Machine Image (AMI) 
        that is designed to accept traffic from instances within a private subnet, translate the source 
        IP address to the public IP address of the NAT instance, and forward the traffic to the IGW.        
    Create a security group for the NAT with outbound rules that specify the needed Internet 
        resources by port, protocol, and IP address.
    Launch an Amazon Linux NAT AMI as an instance in a public subnet and associate it with the 
        NAT security group.
    Disable the Source/Destination Check attribute of the NAT.
    Configure the route table associated with a private subnet to direct Internet-bound 
        traffic to the NAT instance (for example, i-1a2b3c4d).
    Allocate an EIP and associate it with the NAT instance.

NAT Gateway        
    Configure the route table associated with the private subnet to direct Internet-bound traffic 
        to the NAT gateway (for example, nat-1a2b3c4d).
    Allocate an EIP and associate it with the NAT gateway.&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Virtual-Private-Gateways-(VPGs),-Customer-Gateways-(CGWs),-and-Virtual-Private-Networks-(VPNs)&quot;&gt;Virtual Private Gateways (VPGs), Customer Gateways (CGWs), and Virtual Private Networks (VPNs)&lt;a class=&quot;anchor-link&quot; href=&quot;#Virtual-Private-Gateways-(VPGs),-Customer-Gateways-(CGWs),-and-Virtual-Private-Networks-(VPNs)&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;A virtual private gateway (VPG) is the virtual private network (VPN) concentrator on the AWS side 
    of the VPN connection between the two networks. 
A customer gateway (CGW) represents a physical device or a software application on the customer’s 
    side of the VPN connection. 
After these two elements of an Amazon VPC have been created, the last step is to create a VPN tunnel. 
The VPN tunnel is established after traffic is generated from the customer’s side of the VPN connection

If you will be using static routing, you must enter the routes for your network that should be 
    communicated to the VPG. Routes will be propagated to the Amazon VPC to allow your resources to 
    route network traffic back to the corporate network through the VGW and across the VPN tunnel.&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Ankush Agarwal</name></author><summary type="html"></summary></entry><entry><title type="html">Amazon EC2 &amp;amp; EBS</title><link href="https://ankushagarwal87.github.io/continuouslearning/aws/ec2/ebs/2020/06/21/Amazon-Elastic-Compute-Cloud-(EC2)-and-Amazon-Elastic-Block-Store-(EBS).html" rel="alternate" type="text/html" title="Amazon EC2 &amp; EBS" /><published>2020-06-21T00:00:00-05:00</published><updated>2020-06-21T00:00:00-05:00</updated><id>https://ankushagarwal87.github.io/continuouslearning/aws/ec2/ebs/2020/06/21/Amazon-Elastic-Compute-Cloud-(EC2)-and-Amazon-Elastic-Block-Store-(EBS)</id><content type="html" xml:base="https://ankushagarwal87.github.io/continuouslearning/aws/ec2/ebs/2020/06/21/Amazon-Elastic-Compute-Cloud-(EC2)-and-Amazon-Elastic-Block-Store-(EBS).html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-06-21-Amazon Elastic Compute Cloud (EC2) and Amazon Elastic Block Store (EBS).ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Amazon-Elastic-Compute-Cloud-(Amazon-EC2)&quot;&gt;Amazon Elastic Compute Cloud (Amazon EC2)&lt;a class=&quot;anchor-link&quot; href=&quot;#Amazon-Elastic-Compute-Cloud-(Amazon-EC2)&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&quot;Compute-Basics&quot;&gt;Compute Basics&lt;a class=&quot;anchor-link&quot; href=&quot;#Compute-Basics&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Instance Types
    Sample Instance Family
        c4  Compute optimized—For workloads requiring significant processing
        r3  Memory optimized—For memory-intensive workloads
        i2  Storage optimized—For workloads requiring high amounts of fast SSD storage
        g2  GPU-based instances—Intended for graphics and general-purpose GPU compute workloads

Enhanced Networking
    For workloads requiring greater network performance, many instance types support enhanced networking. 
        Enhanced networking reduces the impact of virtualization on network performance by enabling a 
        capability called Single Root I/O Virtualization (SR-IOV). 
        This results in more Packets Per Second (PPS), lower latency, and less jitter.

Four sources of AMIs
    Published by AWS
    The AWS Marketplace
    Generated from Existing Instances
    Uploaded Virtual Servers&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Securely-Using-an-Instance&quot;&gt;Securely Using an Instance&lt;a class=&quot;anchor-link&quot; href=&quot;#Securely-Using-an-Instance&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Addressing an Instance
    Public Domain Name System (DNS) Name
    Public IP
    Elastic IP

Initial Access
Virtual Firewall Protection
    Type of Security Group  Capabilities
    EC2-Classic Security Groups     Control outgoing instance traffic
    VPC Security Groups             Control outgoing and incoming instance traffic&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;The-Lifecycle-of-Instances&quot;&gt;The Lifecycle of Instances&lt;a class=&quot;anchor-link&quot; href=&quot;#The-Lifecycle-of-Instances&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Bootstraping 
    One of the parameters when an instance is launched is a string value called UserData. 
        This string is passed to the operating system to be executed as part of the launch process 
        the first time the instance is booted. On Linux instances this can be shell script, 
        and on Windows instances this can be a batch style script or a PowerShell script. 

VM Import/Export 
Instance Metadata
    http://169.254.169.254/latest/meta-data/
Managing Instances
    Tags can help you manage not just your Amazon EC2 instances
Monitoring Instances
    AWS offers a service called Amazon CloudWatch that provides monitoring and alerting
Modifying an Instance
    Instance Type
        Instances can be resized using the AWS Management Console, CLI, or API
    Security Groups 
        If an instance is running in an Amazon VPC, you can change which security groups 
            are associated with an instance while the instance is running. 
            For instances outside of an Amazon VPC (called EC2-Classic), the association of 
            the security groups cannot be changed after launch.

 Termination Protection
     In order to prevent termination via the AWS Management Console, CLI, or API, 
         termination protection can be enabled for an instance. While enabled, calls 
         to terminate the instance will fail until termination protection is disabled.&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Options&quot;&gt;Options&lt;a class=&quot;anchor-link&quot; href=&quot;#Options&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Pricing Options
    On-Demand Instances
        The price per hour for each instance type
    Reserved Instances 
        The Reserved Instance pricing option enables customers to make capacity 
            reservations for predictable workloads.
    Spot Instances 
        For workloads that are not time critical and are tolerant of interruption, 
            Spot Instances offer the greatest discount.

Tenancy Options
    Shared Tenancy 
        Shared tenancy is the default tenancy model for all Amazon EC2 instances, regardless 
            of instance type, pricing model, and so forth. Shared tenancy means that a single 
            host machine may house instances from different customers. As AWS does not use 
            overprovisioning and fully isolates instances from other instances on the same host, 
            this is a secure tenancy model.

    Dedicated Instances 
        Dedicated Instances run on hardware that’s dedicated to a single customer. 
            As a customer runs more Dedicated Instances, more underlying hardware may be dedicated 
            to their account. Other instances in the account (those not designated as dedicated) 
            will run on shared tenancy and will be isolated at the hardware level from the 
            Dedicated Instances in the account.

    Dedicated Host 
        An Amazon EC2 Dedicated Host is a physical server with Amazon EC2 instance capacity fully 
            dedicated to a single customer’s use. Dedicated Hosts can help you address licensing 
            requirements and reduce costs by allowing you to use your existing server-bound 
            software licenses. The customer has complete control over which specific host runs 
            an instance at launch. This differs from Dedicated Instances in that a Dedicated 
            Instance can launch on any hardware that has been dedicated to the account.

Placement Groups
    A placement group is a logical grouping of instances within a single Availability Zone 

Instance Stores
    An instance store (sometimes referred to as ephemeral storage) provides temporary block-level 
        storage for your instance. &lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Amazon-Elastic-Block-Store-(Amazon-EBS)&quot;&gt;Amazon Elastic Block Store (Amazon EBS)&lt;a class=&quot;anchor-link&quot; href=&quot;#Amazon-Elastic-Block-Store-(Amazon-EBS)&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Elastic Block Store Basics
    Each Amazon EBS volume is automatically replicated within its Availability Zone to protect 
        you from component failure, offering high availability and durability
    Multiple Amazon EBS volumes can be attached to a single Amazon EC2 instance, 
        although a volume can only be attached to a single instance at a time.

Types of Amazon EBS Volumes
    Magnetic Volumes
        Magnetic volumes have the lowest performance characteristics of all Amazon EBS volume types. 
        As such, they cost the lowest per gigabyte. 
        They are an excellent, cost-effective solution for appropriate workloads.
        A magnetic Amazon EBS volume can range in size from 1 GB to 1 TB and will average 100 IOPS, 
            but has the ability to burst to hundreds of IOPS.
        Cold workloads where data is infrequently accessed.

    General-Purpose SSD
        General-purpose SSD volumes offer cost-effective storage that is ideal for a broad range 
            of workloads. 
        They deliver strong performance at a moderate price point that is suitable for a wide 
            range of workloads.
        A general-purpose SSD volume can range in size from 1 GB to 16 TB and provides a 
            baseline performance of three IOPS per gigabyte provisioned, capping at 10,000 IOPS

    Provisioned IOPS SSD
        Provisioned IOPS SSD volumes are designed to meet the needs of I/O-intensive workloads, 
            particularly database workloads that are sensitive to storage performance and 
            consistency in random access I/O throughput. 
        While they are the most expensive Amazon EBS volume type per gigabyte, they provide the 
            highest performance of any Amazon EBS volume type in a predictable manner.
        A Provisioned IOPS SSD volume can range in size from 4 GB to 16 TB. 
        When you provision a Provisioned IOPS SSD volume, you specify not just the size, 
            but also the desired number of IOPS, up to the lower of the maximum of 30 times 
            the number of GB of the volume, or 20,000 IOPS

    Throughput-Optimized 
        HDD volumes are low-cost HDD volumes designed for frequent-access, throughput-intensive 
            workloads such as big data, data warehouses, and log processing. 
        Volumes can be up to 16 TB with a maximum IOPS of 500 and maximum throughput of 500 MB/s. 
        These volumes are significantly less expensive than general-purpose SSD volumes. 

    Cold HDD 
        Volumes are designed for less frequently accessed workloads, such as colder data requiring 
            fewer scans per day. 
        Volumes can be up to 16 TB with a maximum IOPS of 250 and maximum throughput of 250 MB/s. 
        These volumes are significantly less expensive than Throughput-Optimized HDD volumes.&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Protecting-Data&quot;&gt;Protecting Data&lt;a class=&quot;anchor-link&quot; href=&quot;#Protecting-Data&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Backup/Recovery (Snapshots)
    Snapshots are incremental backups, which means that only the blocks on the device that have
        changed since your most recent snapshot are saved.

Taking Snapshots
    Through the AWS Management Console
    Through the CLI
    Through the API
    By setting up a schedule of regular snapshots

     Snapshots are constrained to the region in which they are created, meaning you can use them to 
         create new volumes only in the same region. 
     If you need to restore a snapshot in a different region, you can copy a snapshot to another region.

Creating a Volume from a Snapshot
Recovering Volumes
Encryption Options&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Ankush Agarwal</name></author><summary type="html"></summary></entry><entry><title type="html">Spring Security</title><link href="https://ankushagarwal87.github.io/continuouslearning/spring%20security/2020/06/14/Spring-Security.html" rel="alternate" type="text/html" title="Spring Security" /><published>2020-06-14T00:00:00-05:00</published><updated>2020-06-14T00:00:00-05:00</updated><id>https://ankushagarwal87.github.io/continuouslearning/spring%20security/2020/06/14/Spring-Security</id><content type="html" xml:base="https://ankushagarwal87.github.io/continuouslearning/spring%20security/2020/06/14/Spring-Security.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-06-14-Spring Security.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Intro&quot;&gt;Intro&lt;a class=&quot;anchor-link&quot; href=&quot;#Intro&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Application Security Framework
Handles common vulnerabilities
Username/password authentication
SSO/Okta/LDAP
App level Authorization
Intra App Authorization like OAuth
Microservice Security (Using Tokens, JWT)&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Five-Core-Concept-in-Spring-Security&quot;&gt;Five Core Concept in Spring Security&lt;a class=&quot;anchor-link&quot; href=&quot;#Five-Core-Concept-in-Spring-Security&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Authentication
    Knowledge Based Authentication
        Password
        Pin
        Answer to secret question
    Possession Bases Authentication
        Phone/Test Message
        Id card
        Access Token Device
    Multi Factor Authentication

Authorization    
Principal
    Currently logged in user        
Granted Authority
Roles
    Group of authority&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Adding-Spring-Security&quot;&gt;Adding Spring Security&lt;a class=&quot;anchor-link&quot; href=&quot;#Adding-Spring-Security&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;spring-boot-starter-security 

spring.security.user.name=X
spring.security.user.password=Y&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Configure-Authentication&quot;&gt;Configure Authentication&lt;a class=&quot;anchor-link&quot; href=&quot;#Configure-Authentication&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;AuthenticationManager
    AuthenticationManagerBuilder
        Get Hold of AuthenticationManagerBuilder
        Set the configuration on it

 Create a class
     @EnableWebSecurity
     Extend WebSecurityConfigurerAdapter
     Override configure() method

 For Password Encoding
     @Bean of type Password&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Spring-Boot-+-Spring-Security-with-JPA-authentication&quot;&gt;Spring Boot + Spring Security with JPA authentication&lt;a class=&quot;anchor-link&quot; href=&quot;#Spring-Boot-+-Spring-Security-with-JPA-authentication&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;spring-security-jpa
mysql&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Ankush Agarwal</name></author><summary type="html"></summary></entry></feed>