{
  
    
        "post0": {
            "title": "Spring Boot Microservices",
            "content": "Microservices vs Service Oriented Architecture . Patterns Make microservices work well together Technologies Libraries &amp; framework to solve common problems Service Oriented Architecture Intention is to create reusable utility Consumer are not known in start Microservices Intention is to fulfil application needs Not designed for reuse . Spring Boot Dependencies . spring-boot-starter-web --simple REST API . Annotation . @SpringBootApplication - Main class @Bean - creating a singleton bean @Autowired - Access singleton bean @RestController - On class which is going to address request @RequestMapping(&quot;/catalog&quot;) - resource name on class @RequestMapping(&quot;/{userId}&quot;) - resource instance on method @PathVariable(&quot;userId&quot;) - resource instance in method parameter . Project lombok . org.projectlombok -dependency Add plugin in IDE @Data - Create getter/setter @AllArgsConstructor - Argument costructor @NoArgsConstructor - Default constructor Needed while unmarshalling response from other API By deault first default object gets created then attribute maps in Rest Template . Calling API . Sync - restTemplate.getForObject(url,ClassName) - return response &amp; map it corresponding object Asycn - webClientBuilder.build() .get() -- type of operation .uri(url) .retrieve() .bodyToMono(ClassName.class) -- Promise that object will be return .block() -- Thread will be block till response is received . Returing response from API . Why you should avoid returning lists in APIs If any changes done in API then consumer can also be impacted ParameterizedTypeReference need to be used in consumer for response . Service Discovery . Client Side - Spring Cloud uses this Client check for service url from Discovery server Server Side Discovery server does the operation asked . Eureka Discovery Server . Spring Boot application &lt;spring-cloud.version&gt;Hoxton.SR5&lt;/spring-cloud.version&gt; - properties &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt; --dependency @EnableEurekaServer - on server @EnableEurekaClient - on client @LoadBalanced - RestTemplate - Client discovery &amp; load balancing - Give service name as url .",
            "url": "https://ankushagarwal87.github.io/continuouslearning/spring%20boot/microservices/2020/06/20/Spring-Boot-Microservices.html",
            "relUrl": "/spring%20boot/microservices/2020/06/20/Spring-Boot-Microservices.html",
            "date": " • Jun 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Python Functions, Files & Dictionaries",
            "content": "Files . Reading a file . fileref = open(&quot;filename&quot;,&quot;r&quot;) content = fileref.read() -- Single String content = fileref.readlines() -- list of strings for instance in fileref: print(instance) fileref.close() . Finding a file . open(&quot;../dir/file&quot;,&quot;r&quot;) - relative path - preferred open(&quot;C://dir/file&quot;,&quot;r&quot;) - absolute . Writing a file . fileref = open(&quot;filename&quot;,&quot;w&quot;) fileref.write(&quot;SSSSS&quot;) fileref.close() . Using with for . with open(&quot;file&quot;,&quot;r&quot;) as md: for line in md: print(line) . CSV Output . Read Write . Dictionaries . Operations . del xx[&#39;y&#39;] len(dict) . Methods . dict.keys() list(dict.items()) ## return tuple list(dict.values()) dict.get(&quot;y&quot;) dict.get(&quot;y&quot;,0) . Function . Basics . Definition Parameter Passing Returning Values . Local &amp; Global Variables . If variable assigned value in a funtion before read - local If variable assigned value in a funtion after read - global (global variable) . Mutable Objects &amp; Side Effects . Object will pass as a reference &amp; any changes will alter passed object . Tuples Packing . When need to pass more than one resultset . Iteration and Advanced Functions . While Statement . while {cond} statement continue break . Advance Function . Optional Parameter def f(a,l=[]): Keyword argument f(a=5,l=[&#39;hello&#39;]) Keyword argument to come after non keyword argument . Anonymous Function with Lambda Expression . def func(args): return ret_val func = lambda args:ret value . Sorting . Basics . list.sort() newlist = sorted(list) #create new list newString = sorted(string) Reverse order list.sort(reverse=True) Optional Key newlist = sorted(list,key=function) newlist = sorted(list,key=lambda expression) Call function for each value &amp; sort on the basis of function return value . Sorting Dictionaries . Sorting Dictionary sorted(dict.keys()) sorted(dict.keys(),key=lambda x:dict[x]) -- sort by values sorted(dict.keys(),key=lambda x:dict[x],reverse=True) Breaking Ties sorted(list,key = lambda fruit_name:(len(fruit_name),fruit_name)) . data = open(&#39;test.csv&#39;,&#39;r&#39;) lines = data.readlines() retweets=[] net=[] for line in lines[1:]: words=line.split(&#39;,&#39;) #print(words) retweets.append(words[0]) net.append(words[4].strip()) . import matplotlib.pyplot as plt snipp fig=plt.figure() ax=fig.add_axes([0,0,1,1]) ax.scatter(net, retweets, color=&#39;r&#39;) ax.set_xlabel(&#39;Net Score&#39;) ax.set_ylabel(&#39;Number of Retweets&#39;) ax.set_title(&#39;scatter plot&#39;) plt.show() .",
            "url": "https://ankushagarwal87.github.io/continuouslearning/python/functions/files/dictionaries/2020/06/20/Python-Functions,-Files,-and-Dictionaries.html",
            "relUrl": "/python/functions/files/dictionaries/2020/06/20/Python-Functions,-Files,-and-Dictionaries.html",
            "date": " • Jun 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Python Basics Pointers",
            "content": "Week 1 . Values &amp; Data Types Operators &amp; Operands Order of Operations Function calls Data Types type() Data Types Conversion int() float() str() Variables Statements &amp; Expressions Input input() . Week 2 . Strings List Tuples Index s[0] Length len(..) Slice [:] Concatenation &amp; Repetion [1,2] + [3,4] [1,2] * 3 Count &amp; Index str.count(&#39;a&#39;) str.index(&#39;a&#39;) Split &amp; Join str.split() &quot; &quot;.join(mylist) For loop for name in names: Range range(5) - [0,1,2,3,4] list(range(5)) . Week 3 . Boolean Logical Operator and or not in and not in operator substring in string/list substring not in string/list Conditional statement if True: xxx elif False: yyy else: zzz . Week 4 . Aliasing Two varaible refer same object a = [1,2] b = a b = [3] - a also refer to [3] Cloning List a = [1,2] b = a[:] - create new object Delete List Element del a[1] Method on list append() insert(pos,value) count(&#39;x&#39;) index(&#39;text&#39;) reverse() sort() remove(value) pop() Method on Strings Non mutable - define new string upper() lower() count() strip() replace() split() Reverse str[::-1] .",
            "url": "https://ankushagarwal87.github.io/continuouslearning/python/basics/2020/06/20/Python-Basics.html",
            "relUrl": "/python/basics/2020/06/20/Python-Basics.html",
            "date": " • Jun 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Oracle Cloud Notes",
            "content": "Exam Topics . Cloud Concepts . Getting Started with OCI . Core OCI Services . Security &amp; Compliance . OCI Pricing, support &amp; operations . Cloud Concept . On Demand Self Service Broad Network Access Resource Pooling Rapid Elasticity Measured Service . Service Model . Traditional IT IaaS PaaS SaaS . OCI Architecture . Regions Avaliability Domain Fault Domain . OCI Compute Service . Bare Metal Dedicated Virtual Hosts Virtual Machine Container Engine Functions . OCI Storage Service . Block Volume Local NVMe File Storage Object Storage Archive Storage . OCI Networking Service . Virtual Cloud Network VCN address space VCN Security Peering Load Balancer . OCI IAM . IAM Athentication Authorization Policies . OCI Database Services . DB Options Virtal Machine Bare Metal RAC Exadata Autonamous - Shared Autonamous - Dedicated DB Operations Backup/Restore . OCI Security . Shared Security Model Security Services IAM Data Protection OS Workload Isolation Infrastructure Protection . OCI Pricing .",
            "url": "https://ankushagarwal87.github.io/continuouslearning/oracle%20cloud/2020/06/20/Oracle-Cloud-Infrastructure-Foundations.html",
            "relUrl": "/oracle%20cloud/2020/06/20/Oracle-Cloud-Infrastructure-Foundations.html",
            "date": " • Jun 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Introduction to AWS Notes",
            "content": "Assessment Test . Default Amazon EC2 instance limit of 20 per region. The ELB service allows you to distribute traffic across a group of EC2 instances in one or more Availability Zones within a region An Amazon Elastic Compute Cloud (Amazon EC2) instance in an Amazon Virtual Private Cloud (Amazon VPC) subnet can send and receive traffic from the Internet when Network ACLs and security group rules allow relevant Internet traffic Attach an Internet Gateway (IGW) to the Amazon VPC and create a subnet route table to send all non-local traffic to that IGW. The Amazon EC2 instance has a public IP address or Elastic IP (EIP) address. If a security group is not specified at launch, then an Amazon EC2 instance will be launched into the default security group for the Amazon VPC. The default security group allows communication between all resources within the security group, allows all outbound traffic, and denies all other traffic. An environment tier whose web application runs background jobs is known as a worker tier. An environment tier whose web application processes web requests is known as a web server tier. There can be one secondary index per table, and it must be created when the table is created. The Amazon Kinesis family of services provides functionality to ingest large streams of data. Amazon Kinesis Firehose is specifically designed to ingest a stream and save it to Amazon Simple Storage Service (Amazon S3), Amazon Redshift, or Amazon Elasticsearch Service. Server access logs provide a record of any access to an object in Amazon S3. AWS will never transfer data between regions unless directed to by you. Durability in Amazon S3 is achieved by replicating your data geographically to different Availability Zones regardless of the versioning configuration. AWS doesn&#39;t use tapes. The data in an instance store persists only during the lifetime of its associated instance. If an instance is stopped or terminated, then the instance store does not persist. In an Amazon VPC, an instance&#39;s Elastic IP address remains associated with an instance when the instance is stopped. An activity worker is a process or thread that performs the activity tasks that are part of your workflow. . Compute and Networking Services . Amazon Elastic Compute Cloud (Amazon EC2) is a web service that provides resizable compute capacity in the cloud. It allows organizations to obtain and configure virtual servers in Amazon’s data centers and to harness those resources to build and host software systems. AWS Lambda is a zero-administration compute platform for back-end web developers that runs your code for you on the AWS Cloud and provides you with a fine-grained pricing structure Auto Scaling allows organizations to scale Amazon EC2 capacity up or down automatically according to conditions defined for the particular workload Elastic Load Balancing automatically distributes incoming application traffic across multiple Amazon EC2 instances in the cloud.It enables organizations to achieve greater levels of fault tolerance in their applications,seamlessly providing the required amount of load balancing capacity needed to distribute application traffic. AWS Elastic Beanstalk is the fastest and simplest way to get a web application up and running on AWS. Developers can simply upload their application code, and the service automatically handles all the details, such as resource provisioning, load balancing, Auto Scaling, and monitoring. Amazon Virtual Private Cloud (Amazon VPC) lets organizations provision a logically isolated section of the AWS Cloud where they can launch AWS resources in a virtual network that they define. AWS Direct Connect allows organizations to establish a dedicated network connection from their data center to AWS. Using AWS Direct Connect, organizations can establish private connectivity between AWS and their data center, office, or colocation environment. Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service. It is designed to give developers and businesses an extremely reliable and cost-effective way to route end users to Internet applications by translating human readable names, such as www.example.com, into the numeric IP addresses, such as 192.0.2.1, that computers use to connect to each other. . Storage and Content Delivery . Amazon Simple Storage Service (Amazon S3) provides developers and IT teams with highly durable and scalable object storage that handles virtually unlimited amounts of data and large numbers of concurrent users. Amazon Glacier is a secure, durable, and extremely low-cost storage service for data archiving and long-term backup. Organizations can reliably store large or small amounts of data for a very low cost per gigabyte per month. Amazon Elastic Block Store (Amazon EBS) provides persistent block-level storage volumes for use with Amazon EC2 instances. Each Amazon EBS volume is automatically replicated within its Availability Zone to protect organizations from component failure, offering high availability and durability. AWS Storage Gateway is a service connecting an on-premises software appliance with cloud-based storage to provide seamless and secure integration between an organization’s on-premises IT environment and the AWS storage infrastructure. Amazon CloudFront is a content delivery web service. It integrates with other AWS Cloud services to give developers and businesses an easy way to distribute content to users across the world with low latency, high data transfer speeds, and no minimum usage commitments. . Database Services . Amazon Relational Database Service (Amazon RDS) provides a fully managed relational database with support for many popular open source and commercial database engines. It’s a cost-efficient service that allows organizations to launch secure, highly available, fault-tolerant, production-ready databases in minutes. Amazon DynamoDB is a fast and flexible NoSQL database service for all applications that need consistent, single-digit millisecond latency at any scale. Amazon Redshift is a fast, fully managed, petabyte-scale data warehouse service that makes it simple and cost effective to analyze structured data. Amazon Redshift provides a standard SQL interface that lets organizations use existing business intelligence tools. By leveraging columnar storage technology that improves I/O efficiency and parallelizing queries across multiple nodes, Amazon Redshift is able to deliver fast query performance Amazon ElastiCache is a web service that simplifies deployment, operation, and scaling of an in-memory cache in the cloud. The service improves the performance of web applications by allowing organizations to retrieve information from fast, managed, in-memory caches, instead of relying entirely on slower, disk-based databases. As of this writing, Amazon ElastiCache supports Memcached and Redis cache engines. . Management Tools . Amazon CloudWatch is a monitoring service for AWS Cloud resources and the applications running on AWS. It allows organizations to collect and track metrics, collect and monitor log files, and set alarms. AWS CloudFormation gives developers and systems administrators an effective way to create and manage a collection of related AWS resources, provisioning and updating them in an orderly and predictable fashion. AWS CloudFormation defines a JSON-based templating language that can be used to describe all the AWS resources that are necessary for a workload. Templates can be submitted to AWS CloudFormation and the service will take care of provisioning and configuring those resources in appropriate order. AWS CloudTrail is a web service that records AWS API calls for an account and delivers log files for audit and review. AWS Config is a fully managed service that provides organizations with an AWS resource inventory, configuration history, and configuration change notifications to enable security and governance. With AWS Config, organizations can discover existing AWS resources, export an inventory of their AWS resources with all configuration details, and determine how a resource was configured at any point in time. These capabilities enable compliance auditing, security analysis, resource change tracking, and troubleshooting. . Security and Identity . AWS Identity and Access Management (IAM) enables organizations to securely control access to AWS Cloud services and resources for their users. AWS Key Management Service (KMS) is a managed service that makes it easy for organizations to create and control the encryption keys used to encrypt their data and uses Hardware Security Modules (HSMs) to protect the security of your keys. AWS Directory Service allows organizations to set up and run Microsoft Active Directory on the AWS Cloud or connect their AWS resources with an existing on-premises Microsoft Active Directory. AWS Certificate Manager is a service that lets organizations easily provision, manage, and deploy Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificates for use with AWS Cloud services. AWS Web Application Firewall (WAF) helps protect web applications from common attacks and exploits that could affect application availability, compromise security, or consume excessive resources. AWS WAF gives organizations control over which traffic to allow or block to their web applications by defining customizable web security rules. . Application Services . Amazon API Gateway is a fully managed service that makes it easy for developers to create, publish, maintain, monitor, and secure APIs at any scale. Organizations can create an API that acts as a “front door” for applications to access data, business logic, or functionality from back-end services, such as workloads running on Amazon EC2, code running on AWS Lambda, or any web application. Amazon Elastic Transcoder is media transcoding in the cloud. Amazon Simple Notification Service (Amazon SNS) is a web service that coordinates and manages the delivery or sending of messages to recipients. Amazon Simple Email Service (Amazon SES) is a cost-effective email service that organizations can use to send transactional email, marketing messages, or any other type of content to their customers. Amazon Simple Workflow Service (Amazon SWF) helps developers build, run, and scale background jobs that have parallel or sequential steps. Amazon Simple Queue Service (Amazon SQS) is a fast, reliable, scalable, fully managed message queuing service.Amazon SQS makes it simple and cost effective to decouple the components of a cloud application. .",
            "url": "https://ankushagarwal87.github.io/continuouslearning/aws/study%20guide/2020/06/20/Introduction-to-AWS.html",
            "relUrl": "/aws/study%20guide/2020/06/20/Introduction-to-AWS.html",
            "date": " • Jun 20, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "Data Collection and Processing with Python",
            "content": "Nested Data . list = [[1,2][3,4]] dict = {&#39;a&#39;:{&#39;b&#39;:&#39;c&#39;}} . JSON . import json a = &#39;{&quot;menu&quot;: {&quot;id&quot;: &quot;file&quot;,&quot;value&quot;: &quot;File&quot;,&quot;popup&quot;: {&quot;menuitem&quot;: [{&quot;value&quot;: &quot;New&quot;, &quot;onclick&quot;: &quot;CreateNewDoc()&quot;}]}}}&#39; dictionary = json.loads(a) ## convert json object to dictionary print(dictionary.keys()) . dict_keys([&#39;menu&#39;]) . dictionary = {&#39;a&#39;:{&#39;b&#39;:&#39;c&#39;}} print(json.dumps(dictionary)) ## convert dictionary to json . {&#34;a&#34;: {&#34;b&#34;: &#34;c&#34;}} . Nested Iteration . for x in y: for y in z: . Deep &amp; Shallow Copy . list_a=[[2,3][4,5]] list_b=list_a list_a([0]).append([4]) list b also has new value added - shallow copy import copy list_c=copy.deepcopy(list_a) Shallow Copy A shallow copy of an object copies the ‘main’ object, but doesn’t copy the inner objects. The ‘inner objects’ are shared between the original object and its copy. The problem with the shallow copy is that the two objects are not independent. copy.copy(object) Deep copy Deep copy is a fully independent copy of an object copy.deepcopy(object) . Map and Filter . def square(x): return x*x list_a=[1,2] list_b=map(square,list_a) ## Call square function on each values print(list(list_b)) list_c=map(lambda x:x*x,list_a) ###Can be used on any type (map(function,itearable)) print(list(list_c)) . [1, 4] [1, 4] . list_a=[1,2] list_b=filter(lambda x:x%2==0,list_a) print(list(list_b)) . [2] . List Comprehensions . [&lt;transfor_operation&gt; for &lt;varname&gt; in &lt;seq&gt; if &lt;filter_expression&gt;] . list_a=[1,2] list_b=[x*2 for x in list_a] print(list_b) . [2, 4] . list_a=[1,2] list_b=[x for x in list_a if x%2==0] print(list_b) . [2] . Zip . list_a=[1,2] list_b=[3,4] list_c=zip(list_a,list_b) print(list(list_c)) . [(1, 3), (2, 4)] . Requesting Data from the Internet . import requests page=requests.get(&quot;https://www.google.com/&quot;) print(page) #print(page.text) . &lt;Response [200]&gt; .",
            "url": "https://ankushagarwal87.github.io/continuouslearning/python/data%20collection/2020/06/20/Data-Collection-and-Processing-with-Python.html",
            "relUrl": "/python/data%20collection/2020/06/20/Data-Collection-and-Processing-with-Python.html",
            "date": " • Jun 20, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "Classes and Inheritance",
            "content": "Clasess . class Point(): def getX(self): ## self refer to instance return self.x point1=Point() point1.x=5 print(point1.getX()) . 5 . #Constructor class Point(): def __init__(self,x,y): self.x=x self.y=y def getX(self): return self.x point1=Point(5,1) print(point1.getX()) . 5 . # Coverting object to String class Point(): def __init__(self,x,y): self.x=x self.y=y def getX(self): return self.x def __str__(self): return str(self.x) point1=Point(5,1) print(point1) . 5 . # Sorting class Point(): def __init__(self,x,y): self.x=x self.y=y def getX(self): return self.x def __str__(self): return str(self.x) def sort(self): return self.x pointList=[Point(5,1),Point(3,1)] for point in sorted(pointList,key=Point.sort): print(point) . 3 5 . Inheritence . class Person(): def __init__(self,name): self.name=name def getName(self): return self.name def __str__(self): return str(self.name) class Student(Person): #Define Student inherit from Person def __init__(self,name,rollno): Person.__init__(self,name) self.rollno=rollno def getRollNo(self): return self.rollno alice=Student(&#39;Alice&#39;,1) print(alice) . Alice . Test Cases . import test test.testEqual(1,3) . Exceptions . try: a=b/0 except: print(&#39;error&#39;) . error .",
            "url": "https://ankushagarwal87.github.io/continuouslearning/python/classes/inheritence/exception/2020/06/20/Classes-and-Inheritance.html",
            "relUrl": "/python/classes/inheritence/exception/2020/06/20/Classes-and-Inheritance.html",
            "date": " • Jun 20, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "Amazon S3",
            "content": "Introduction . Amazon S3 serves as the durable target storage for Amazon Kinesis and Amazon Elastic MapReduce (Amazon EMR), it is used as the storage for Amazon Elastic Block Store (Amazon EBS) and Amazon Relational Database Service (Amazon RDS) snapshots, and it is used as a data staging or loading storage mechanism for Amazon Redshift and Amazon DynamoDB. Amazon S3 objects are automatically replicated on multiple devices in multiple facilities within a region. You can create and use multiple buckets; you can have up to 100 per account by default. Objects can range in size from 0 bytes upto 5TB,and a single bucket can store an unlimited number of objects The native interface for Amazon S3 is a REST (Representational State Transfer) API. With the REST interface, you use standard HTTP or HTTPS requests to create and delete buckets, list keys, and read and write objects. Amazon S3 achieves high durability by automatically storing data redundantly on multiple devices in multiple facilities within a region. It is designed to sustain the concurrent loss of data in two facilities without loss of user data. . Access Control . Amazon S3 is secure by default; when you create a bucket or object in Amazon S3, only you have access. To allow you to give controlled access to others, Amazon S3 provides both coarse-grained access controls (Amazon S3 Access Control Lists [ACLs]), and fine-grained access controls (Amazon S3 bucket policies, AWS Identity and Access Management [IAM] policies, and query-string authentication). Using an Amazon S3 bucket policy, you can specify who can access the bucket, from where (by Classless Inter-Domain Routing [CIDR] block or IP address), and during what time of day. Finally, IAM policies may be associated directly with IAM principals that grant access to an Amazon S3 bucket, just as it can grant access to any AWS service and resource. Lifecycle configurations are attached to the bucket and can apply to all objects in the bucket or only to objects specified by a prefix. . Encryption . To encrypt your Amazon S3 data in flight, you can use the Amazon S3 Secure Sockets Layer (SSL) API endpoints. This ensures that all data sent to and from Amazon S3 is encrypted while in transit using the HTTPS protocol. To encrypt your Amazon S3 data at rest, you can use several variations of Server-Side Encryption (SSE). Amazon S3 encrypts your data at the object level as it writes it to disks in its data centers and decrypts it for you when you access it. All SSE performed by Amazon S3 and AWS Key Management Service (Amazon KMS) uses the 256-bit Advanced Encryption Standard (AES). You can also encrypt your Amazon S3 data at rest using Client-Side Encryption, encrypting your data on the client before sending it to Amazon S3. SSE-S3 (AWS-Managed Keys) This is a fully integrated “check-box-style” encryption solution where AWS handles the key management and key protection for Amazon S3. Every object is encrypted with a unique key. The actual object key itself is then further encrypted by a separate master key. A new master key is issued at least monthly, with AWS rotating the keys. Encrypted data, encryption keys, and master keys are all stored separately on secure hosts, further enhancing protection. SSE-KMS (AWS KMS Keys) This is a fully integrated solution where Amazon handles your key management and protection for Amazon S3, but where you manage the keys. SSE-KMS offers several additional benefits compared to SSE-S3. Using SSE-KMS, there are separate permissions for using the master key, which provide protection against unauthorized access to your objects stored in Amazon S3 and an additional layer of control. SSE-C (Customer-Provided Keys) This is used when you want to maintain your own encryption keys but don’t want to manage or implement your own client-side encryption library. With SSE-C, AWS will do the encryption/decryption of your objects while you maintain full control of the keys used to encrypt/decrypt the objects in Amazon S3. Client-Side Encryption Client-side encryption refers to encrypting data on the client side of your application before sending it to Amazon S3. . Pointers . Pre-Signed URLs All Amazon S3 objects by default are private, meaning that only the owner has access. However, the object owner can optionally share objects with others by creating a pre-signed URL, using their own security credentials to grant time-limited permission to download the objects. When you create a pre-signed URL for your object, you must provide your security credentials and specify a bucket name, an object key, the HTTP method (GET to download the object), and an expiration date and time. The pre-signed URLs are valid only for the specified duration. This is particularly useful to protect against “content scraping” of web content such as media files stored in Amazon S3. Multipart Upload To better support uploading or copying of large objects, Amazon S3 provides the Multipart Upload API. This allows you to upload large objects as a set of parts, which generally gives better network utilization (through parallel transfers), the ability to pause and resume, and the ability to upload objects where the size is initially unknown. Range GETs It is possible to download (GET) only a portion of an object in both Amazon S3 and Amazon Glacier by using something called a Range GET. Using the Range HTTP header in the GET request or equivalent parameters in one of the SDK wrapper libraries, you specify a range of bytes of the object. This can be useful in dealing with large objects when you have poor connectivity or to download only a known portion of a large Amazon Glacier backup. Cross-Region Replication Cross-region replication is a feature of Amazon S3 that allows you to asynchronously replicate all new objects in the source bucket in one AWS region to a target bucket in another region. Any metadata and ACLs associated with the object are also part of the replication. After you set up cross-region replication on your source bucket, any changes to the data, metadata, or ACLs on an object trigger a new replication to the destination bucket. To enable cross-region replication, versioning must be turned on for both source and destination buckets, and you must use an IAM policy to give Amazon S3 permission to replicate objects on your behalf. Logging In order to track requests to your Amazon S3 bucket, you can enable Amazon S3 server access logs. Logging is off by default, but it can easily be enabled. Event Notifications Amazon S3 event notifications can be sent in response to actions taken on objects uploaded or stored in Amazon S3. Event notifications enable you to run workflows, send alerts, or perform other actions in response to changes in your objects stored in Amazon S3. You can use Amazon S3 event notifications to set up triggers to perform actions, such as transcoding media files when they are uploaded,processing data files when they become available, and synchronizing Amazon S3 objects with other data stores. Another common pattern is to use Amazon S3 as bulk “blob” storage for data, while keeping an index to that data in another service, such as Amazon DynamoDB or Amazon RDS. This allows quick searches and complex queries on key names without listing keys continually. . Amazon Glacier . Archives In Amazon Glacier, data is stored in archives. An archive can contain up to 40TB of data, and you can have an unlimited number of archives. Vaults Vaults are containers for archives. Each AWS account can have up to 1,000 vaults. You can control access to your vaults and the actions allowed using IAM policies or vault access policies. Vaults Locks You can easily deploy and enforce compliance controls for individual Amazon Glacier vaults with a vault lock policy. You can specify controls such as Write Once Read Many (WORM) in a vault lock policy and lock the policy from future edits. Once locked, the policy can no longer be changed. .",
            "url": "https://ankushagarwal87.github.io/continuouslearning/aws/s3/glacier/2020/06/20/Amazon-Simple-Storage-Service-and-Amazon-Glacier-Storage.html",
            "relUrl": "/aws/s3/glacier/2020/06/20/Amazon-Simple-Storage-Service-and-Amazon-Glacier-Storage.html",
            "date": " • Jun 20, 2020"
        }
        
    
  
    
        ,"post8": {
            "title": "Amazon EC2 & EBS",
            "content": "Amazon Elastic Compute Cloud (Amazon EC2) . Compute Basics . Instance Types Sample Instance Family c4 Compute optimized—For workloads requiring significant processing r3 Memory optimized—For memory-intensive workloads i2 Storage optimized—For workloads requiring high amounts of fast SSD storage g2 GPU-based instances—Intended for graphics and general-purpose GPU compute workloads Enhanced Networking For workloads requiring greater network performance, many instance types support enhanced networking. Enhanced networking reduces the impact of virtualization on network performance by enabling a capability called Single Root I/O Virtualization (SR-IOV). This results in more Packets Per Second (PPS), lower latency, and less jitter. Four sources of AMIs Published by AWS The AWS Marketplace Generated from Existing Instances Uploaded Virtual Servers . Securely Using an Instance . Addressing an Instance Public Domain Name System (DNS) Name Public IP Elastic IP Initial Access Virtual Firewall Protection Type of Security Group Capabilities EC2-Classic Security Groups Control outgoing instance traffic VPC Security Groups Control outgoing and incoming instance traffic . The Lifecycle of Instances . Bootstraping One of the parameters when an instance is launched is a string value called UserData. This string is passed to the operating system to be executed as part of the launch process the first time the instance is booted. On Linux instances this can be shell script, and on Windows instances this can be a batch style script or a PowerShell script. VM Import/Export Instance Metadata http://169.254.169.254/latest/meta-data/ Managing Instances Tags can help you manage not just your Amazon EC2 instances Monitoring Instances AWS offers a service called Amazon CloudWatch that provides monitoring and alerting Modifying an Instance Instance Type Instances can be resized using the AWS Management Console, CLI, or API Security Groups If an instance is running in an Amazon VPC, you can change which security groups are associated with an instance while the instance is running. For instances outside of an Amazon VPC (called EC2-Classic), the association of the security groups cannot be changed after launch. Termination Protection In order to prevent termination via the AWS Management Console, CLI, or API, termination protection can be enabled for an instance. While enabled, calls to terminate the instance will fail until termination protection is disabled. . Options . Pricing Options On-Demand Instances The price per hour for each instance type Reserved Instances The Reserved Instance pricing option enables customers to make capacity reservations for predictable workloads. Spot Instances For workloads that are not time critical and are tolerant of interruption, Spot Instances offer the greatest discount. Tenancy Options Shared Tenancy Shared tenancy is the default tenancy model for all Amazon EC2 instances, regardless of instance type, pricing model, and so forth. Shared tenancy means that a single host machine may house instances from different customers. As AWS does not use overprovisioning and fully isolates instances from other instances on the same host, this is a secure tenancy model. Dedicated Instances Dedicated Instances run on hardware that’s dedicated to a single customer. As a customer runs more Dedicated Instances, more underlying hardware may be dedicated to their account. Other instances in the account (those not designated as dedicated) will run on shared tenancy and will be isolated at the hardware level from the Dedicated Instances in the account. Dedicated Host An Amazon EC2 Dedicated Host is a physical server with Amazon EC2 instance capacity fully dedicated to a single customer’s use. Dedicated Hosts can help you address licensing requirements and reduce costs by allowing you to use your existing server-bound software licenses. The customer has complete control over which specific host runs an instance at launch. This differs from Dedicated Instances in that a Dedicated Instance can launch on any hardware that has been dedicated to the account. Placement Groups A placement group is a logical grouping of instances within a single Availability Zone Instance Stores An instance store (sometimes referred to as ephemeral storage) provides temporary block-level storage for your instance. . Amazon Elastic Block Store (Amazon EBS) . Elastic Block Store Basics Each Amazon EBS volume is automatically replicated within its Availability Zone to protect you from component failure, offering high availability and durability Multiple Amazon EBS volumes can be attached to a single Amazon EC2 instance, although a volume can only be attached to a single instance at a time. Types of Amazon EBS Volumes Magnetic Volumes Magnetic volumes have the lowest performance characteristics of all Amazon EBS volume types. As such, they cost the lowest per gigabyte. They are an excellent, cost-effective solution for appropriate workloads. A magnetic Amazon EBS volume can range in size from 1 GB to 1 TB and will average 100 IOPS, but has the ability to burst to hundreds of IOPS. Cold workloads where data is infrequently accessed. General-Purpose SSD General-purpose SSD volumes offer cost-effective storage that is ideal for a broad range of workloads. They deliver strong performance at a moderate price point that is suitable for a wide range of workloads. A general-purpose SSD volume can range in size from 1 GB to 16 TB and provides a baseline performance of three IOPS per gigabyte provisioned, capping at 10,000 IOPS Provisioned IOPS SSD Provisioned IOPS SSD volumes are designed to meet the needs of I/O-intensive workloads, particularly database workloads that are sensitive to storage performance and consistency in random access I/O throughput. While they are the most expensive Amazon EBS volume type per gigabyte, they provide the highest performance of any Amazon EBS volume type in a predictable manner. A Provisioned IOPS SSD volume can range in size from 4 GB to 16 TB. When you provision a Provisioned IOPS SSD volume, you specify not just the size, but also the desired number of IOPS, up to the lower of the maximum of 30 times the number of GB of the volume, or 20,000 IOPS Throughput-Optimized HDD volumes are low-cost HDD volumes designed for frequent-access, throughput-intensive workloads such as big data, data warehouses, and log processing. Volumes can be up to 16 TB with a maximum IOPS of 500 and maximum throughput of 500 MB/s. These volumes are significantly less expensive than general-purpose SSD volumes. Cold HDD Volumes are designed for less frequently accessed workloads, such as colder data requiring fewer scans per day. Volumes can be up to 16 TB with a maximum IOPS of 250 and maximum throughput of 250 MB/s. These volumes are significantly less expensive than Throughput-Optimized HDD volumes. . Protecting Data . Backup/Recovery (Snapshots) Snapshots are incremental backups, which means that only the blocks on the device that have changed since your most recent snapshot are saved. Taking Snapshots Through the AWS Management Console Through the CLI Through the API By setting up a schedule of regular snapshots Snapshots are constrained to the region in which they are created, meaning you can use them to create new volumes only in the same region. If you need to restore a snapshot in a different region, you can copy a snapshot to another region. Creating a Volume from a Snapshot Recovering Volumes Encryption Options .",
            "url": "https://ankushagarwal87.github.io/continuouslearning/aws/ec2/ebs/2020/06/20/Amazon-Elastic-Compute-Cloud-(EC2)-and-Amazon-Elastic-Block-Store-(EBS).html",
            "relUrl": "/aws/ec2/ebs/2020/06/20/Amazon-Elastic-Compute-Cloud-(EC2)-and-Amazon-Elastic-Block-Store-(EBS).html",
            "date": " • Jun 20, 2020"
        }
        
    
  
    
        ,"post9": {
            "title": "AWS Notes",
            "content": "Overview . ![](my_icons/Overview.png) . AWS Global Infrastructure A region is a geographical area Each region consists of 2+ Availability Zones AZ is a data center facility Edge location are endpoints for AWS which are used for caching content Important Services Compute Storage Database Network &amp; Content Delivery Security, Identity &amp; Compliance . IAM . Allow you to manage users &amp; their level of access to the AWS Console. Features Centralised Control of your AWS account Shared access to your AWS account Granular Permission Identity Federation (Including active directory, Facebook, Linkedin) Multifactor Authentication Temporary access for users/devices Password rotation policy Integrates with many different AWS services Support PCI DCS Compliance Terminology Users Groups Policies Roles IAM is universal New user have no permission by default Type of Access Console Programmatic . Billing Alarm . Management &amp; Governance CloudWatch Billing Alarm SNS Topic . S3 . Secure, durable, highly scalable object storage. Files - 0 to 5 TB Unlimited storage Universal Namespace - names must be unique globally HTTP 200 - Successful response Can enable MFA for delete . Object contains following . Key - Name of the object Value - Data Sequence of bytes Version ID Metadata Subresources Access Control List Torrent . Data Consistency Model . Read after Write Consistency for PUTS of new object Eventual Consistency for overwrite PUTS &amp; DELETE Can take some time for changes to propogate . Gurantees . Built for 99.99% Availablity for S3 platform Amazon Gurantees 99.9% Availability Amazon Gurantees 99.999999999% Durability . Storage Class . S3 Standard 99.99% Availability 99.999999999% Durability Stored redundantly across multiple devices in multiple facilities Sustain loss of 2 facilities concurrently S3 IA Infrequent Accessed For data that is accessed less frequently but require rapid access when needed Lower fee than Standard but charged a retrieval fee S3 One Zone IA Lower cost option for S3 IA Do not require mutiple availability zone data resilience S3 Inteliigent Tiering Designed to optimise costs by automatically moving data to the most cost effective access tier without performance impact or operational overhead S3 Glacier Secure, Durable &amp; low cost storage class for data archiving S3 Glacier Deep Archive Lowest Cost storage option Retrieval time of 12 hour is acceptable . ![](my_icons/S3.png) . Charges . Storage Requests Storage Management - Pricing Data Transfer Transfer Acceleration Cross region replication pricing . Pricing Tiers . Standard - 0.023 - 0.021 Per GB Intelligent - 0.023 - 0.0125 Per GB Standard IA - 0.023 - 0.0125 Per GB One Zone IA - 0.01 Per GB Glacier - 0.004 Per GB Glacier Deep Archive - 0.00099 Per GB . Security &amp; Encryption . All newly created bucket by default are Private Setp access control to bucket using Bucket Policies Access Control Lists At individual object level Encryption in transit - SSL/TLS Encryption at rest Server Side S3 Managed Key - Serverside Encryption S3 - SSE-S3 AWS Key Management Service, Managed Keys - SSE-KMS Server Side Encryption with Customer provided keys - SSE-C Client side Encryption . Version Control . Stores all version of an object Once enabled, Versioning cannot be disabled, only suspended. Integrates with Lifecycle rules MFA Delete capability . Lifecycle Management . Automates moving object between the different storage tiers Can be used in conjuction with versioning Can be applied to current versions &amp; previous versions . AWS Organizations &amp; Consolidated Billing . AWS Organization is an account management service that enables you to consolidate multiple AWS accounts into an organization that you create &amp; centrally manage. Consolidated Billing One bill for all AWS accounts Service Control Policies Control access for organization unit . Sharing S3 buckets across Accounts . Using Bucket Policy &amp; IAM Applies across entire bucket Programmatic access only Using Bucket ACL &amp; IAM Individual object Programmatic access only Cross account IAM roles Programmatic &amp; Console acccess . Cross Region Replication . Versioning must be enabled on both source &amp; destination bucket Existing object need to replicated manually Delete marker are not replicated Deleting individual version will not be replicated . Transfer Acceleration . Enables fast, easy &amp; secure transfer of files over long duration between user &amp; S3. Takes advantage of CloudFront distributed edge locations. As data arrives at an edge location it is routed over an optimized network path. Use distinct URL to upload directly to an edge location which will then transfer it to S3. . CloudFront . Can be used to deliver entire website using a global network of edge locations. Request for content are automatically routed to nearest edge location Two Types Web distribution - Website RTMP - Media streaming Origin This is the origin of all the files that CDN will distribute. This can be either an S3 bucket,an EC2 instance,an elastic load balancer or route 53. Objects are cached for the life of TTL(Time to Live) Can clear cached objects but it will be charged . Snowball . Snowball is a petabyte scale data transport solution that uses secure appliances to transfer large amounts of data into &amp; out of AWS. Come in size of 50 TB or 80TB size 256 bit encryption Snowball Edge 100 TB data transfer device with onboard storage &amp; compute capabilities. Snow Mobile Exabyte scale data transfer service Data Center migration . Storage Gateway . Service that connect an on-premises software appliance with cloud storage to provide seamless &amp; secure integration between an organization&#39;s IT environment &amp; AWS&#39;s storage infrastructure. Types File Gateway NFS &amp; SMB Files are stored as objects in S3 buckets accesses through a Network File System mount point. Volume Gateway Volume Interface present applications with Disk Volumes using the iSCSI block protocol Data written to these volume can be asynchronously backed up as a point in time snapshots of volumes &amp; stored in the cloud as Amazon EBS snapshots. Stored Volume Store data locally while asynchronouly backing up that data to AWS Provide on-premises application with low latency access while providing durable offsite backup Cached Volume Use S3 as your primary data storage while retaining frequent data locally in Storage Gateway. Type Gateway Offer a durable cost effective solution to archive data in AWS cloud. . Athena vs Macie . Athena Interactive query service which enables to anaylse &amp; query data located in S3 using standard SQL Can be used to query log files. Generate business reports Analyse AWS cost &amp; usage reports Run queries on click strem data Macie Security Service uses ML &amp; NLP to discover,classify &amp; protect sensitive data stored in S3. . EC2 . Web service that provides resizable compute capacity in the cloud On Demand Fixed rate by hour(second) - No commitment Reserved Capacity preservation(1-3 year commitment) Types Standard 75% off On Demand Convertible 54% off on Demand Change the attribute of the RI Scheduled Available to launch within the time windows you reserve Spot Bid whatever price you want for instance (flexible timing) Dedicated Hosts Physical EC2 server dedicated for your use. Useful for regulatory requirements Great for licensing . Security Group . Rule apply automatically By default - No inbound rule, allow all outbound When inbound rule allow - outbound rule allow automatically - stateful Can apply security group to more than 1 instances Can add more than 1 security group to an instance Can specify only allow rules Can not bloclist any individual IP . EBS . Provides persistent block storage volume for use with Amazon EC2 instances. Each EBS volume replicate within its AZ to protect you from component failure offering high availability &amp; durabilty Types General Purpose (SSD) Provisioned IOPS (SSD) Throughput Optimsed (HDD) Cold (HDD) Magnetic (HDD) . ![](my_icons/EBS.png) . Volumes &amp; Snapshots . Volume is going to be in same AZ as EC2 instances Snapshot - For moving volume from one region to another region If running EC2 instance gets terminated additional volume will persist Snapshots are stored in S3 Snapshots are incremental To move an EC2 volume from one AZ to another Take a snapshot Create an AMI from the snapshot Use the AMI to launch the EC2 instance in a new AZ To move an EC2 volume from one region to another Take a snapshot Create an AMI from the snapshot Copy the AMI from one region to another Use the AMI to launch the EC2 instance in a new AZ . AMI Types - Amazon Machine Image . Select your AMI based on Region Architecture OS Launch Permission Storage for the root device Instance Store(EPHEMERSL STORAGE) Root device for an instance launched from the AMI is an instance store volume created from a template stored in S3. Instance Store volumes cannot be stopped If the underlying host fails you will lose your data. EBS Backed Volumes Root device for an instance launched from the AMI is an Amazon EBS volume created from an Amazon EBS snapshot. . ENI vs ENA vs EFA . ENI - Elastic Network Interface Virtual Network card Low budget high availability solution ENA - Enhanced Networking Uses single root I/O virtualization SR - IOV to provide high performance networking capabilities Provides higher I/O Performance &amp; lower CPU utilization No additional charges for using EN Use where we want good network performance Can be enabled using EN Adaptor or Intel 82599 Virtual Function EFA - Elastic Fabric Adaptor A network device that can be attach to EC2 instance to accelerate High Performance Computing HPC &amp; machine learning aaplications. Provides lower &amp; more consistent latency &amp; higher througput OS by pass . Encrypted Root Device Volumes &amp; Snapshots . Snapshot of encrypted volumes are encrypted auomatically Can share snapshots if they are encrypted . CloudWatch . Monitoring service to monitor AWS resources as well as the applications. Can monitor Compute EC2 instances CPU Network Disk Status Check Autoscaling groups Elastic Load Balancer Route53 Health Checks Storage &amp; Content Delivery EBS Volumes Storage Gateways CloudFront Will monitor events every 5 minutes by default Can have 1 minute intervals by turning on detailed monitoring Can create Cloudwatch Alarms which trigger notifications . CloudTrail . Increases visbility into user &amp; resource activity by recording AWS management console actions &amp; API calls . AWS Command Line . Need to setup access in IAM Roles help us to use command line without storing credential Roles can be attach to EC2 instance . Bootstrap Scripts . Setup script which run during instance boot up . Instance Metadata . From CLI can get instance metadata curl http://169.254.169.254/latest/user-data curl http://169.254.169.254/latest/meta-data . EFS Elastics File System . File storage available for EC2 instances Allow to configure &amp; create file system quickly &amp; easily Can be shared across instances Elastic in nature Support NFSv4 protocol Can scale up to Petabyte Data is stored across multiple AZ within a region Read after Write consistency Pay for the storage used . FSx for Windows . Provides a fully managed native Windows file system Built on Windows server Manages Window server that runs Windows Server Message Block(SMB) based file services. . FSx for Lustre . Fully managed files system that is optmised for compute intesive workloads such as high performance computing machine learning, media data processing workflow. Directly stored on S3 . EC2 Placement Group . Clustered Grouping of instances in a single AZ Low network latency &amp; high througput Can&#39;t span multiple AZ Spread Group of instances placed on distinct underlying hardware Small number of critical instances that should be kept separate from each other. Individual Instances Partitioned Each group into logical segments called partition No partition share the same rack Mutiple Instances . WAF - Web Application Firewall . Monitor the HTTP &amp; HTTPs request that are forwarded to Amazon CloudFront, an Application Load Balancer or API Gateway Also let you control access to your content Allow all request except the one you specify Block all request except the one you specify Count the request that matches the properties specify. . Database on AWS . Realation Databases on AWS . SQL Server Oracle MySQL PostgreSQL Aurora MariaDB . RDS has two features . Multi AZ for Disaster Recovery If databse failed at any instance AWS will point to another instance on different AZ Available for all relational except Aurora Read Replicas for Performance Whenever write is happening it gets replicated to another instance at another AZ Manually need to tell AWS when to start reading from replicas (Can have 5 replicas) Available for all relational except SQL Server Used for Scaling Must have Automatic backup turned on Each read replica will have its own DNS end point Can have read replica in a second region . Non Relational . DynamoDB Collection - Table Documents - Rows Key value pair - Fields . Data Warehouse . OLTP vs OLAP Red Shift - Amazon&#39;s Data Warehouse Solution . Elastic Cache . Elastic Cache is a web service that makes it easy to deploy,operate and scale an in memory cache in the cloud. Support two open source in cache memory caching engines: Memcached - Simple , multithreading Redis - Sopisticated Any other needs - Multi AZ, Backup/restore . Pointers . RDS runs on virtual machines We cannot login to those VM Patching of RDS OS &amp; DB is Amazon&#39;s reponsibilty RDS is not serverless Aurora Serverless is Serverless . Backup . Automated Retention period (1-35 days) Enabled by default Data stored in S3 (Free storage upto size of db storage) During window cycle Database Snapshots Created manually Persist even after RDS is deleted Whenever we restore - New RDS instance with new end points get created . Encryption . Supported for all relational database Done by AWS Key Management Service When RDS instance encrypted - data stored at rest, replica, snapshots, backup - all get encrypted . DynamoDB . Fully managed database &amp; supports both documents &amp; key-value data models. Stored on SSD storage Spread across 3 geagraphically distinct data centers Eventaul Consistent Read (Default) - Consistency usually reached within a second Strongly Consistent Read - Return a result that relects all successful writes . Redshift . Petabyte scale data warehouse service in the cloud Configuration Single Node(160Gb) Multiple Node Master Node Compute Node (upto 128) Columnar data stores can be compressed more than row based storage since similar data is stored sequentially Doesn&#39;t require indexes or materialized views Automatically distribute data &amp; query load to all nodes Backup enable by default of 1 day (Can keep 35 days) Always attempt to keep atleast 3 copies of data Original &amp; replica on compute nodes &amp; backup on S3 Can replicate snapshots to S3 in another region Pricing Compute node per hour charged Leader node not charged Backup Security Encrypted in transit using SSL Encrypted at rest using AES-256 encryption Available only in 1 AZ . Aurora . MySQL &amp; PostgreSQL compatible relational database engines 5 times better performance than MySql 3 times better performance than PostgreSQL Start with 10 GB &amp; then scale in increment of 10 GB until 64 TB Compute resource can scale upto 32vCPU &amp; 244 GB of memory 2 copies of data is contained in each AZ with minumum of 3 AZ Handles loss of upto 2 copies of data without affecting write availability &amp; upto 3 copies of data without affecting read availability Storage is self healing Replicas Aurora (15) MySQL(5) PostgreSQL(1) Backup Automated backup always enabled can share snapshots across AWS accounts Serverless On demand, autoscaling configurations for MySQL &amp; PostgreSQL compatible editions of Aurora An Aurora Serverless DB Cluster automatically starts up,shuts down,and scale as per applications&#39;s needs. Cost effective for infrequent,intermittent, unpredictable loads. . DNS . Intro . DNS Domain Registrar SOA Record - Start of Authority NS - Name Server Used by top level domain server to direct traffic to content DNS server A record - Address record TTL - Time to Live C Name - Canonical Name Alias record Elastic Load Balancer Do not have pre defined IPv4 address, resolve them using DNS name . Routing Policies . Simple - Random Weighted - Based on traffic weight specified Latency Based - Based on the region which gives lowest latency to user Failover - active/passive setup Geolocation - Based on the region of user Geoproximity - Traffic policy - Based on the region of user &amp; resources Multivalue - Simple with health check . VPC . Intro . Provision a logically isolated section of the AWS cloud where you can launch AWS resources in a virtual network that you define. Selection of own ip address range, creation of subnet, configuration of route tables &amp; network gateways. Create a public facing subnet for your webservers that has access to the internet. Place backend systems in a private subnet with no internet access. Leverage security group &amp; network control access list to control access to EC2 instance in subnet. Create a VPN connection between corporate data center &amp; VPC 1 subnet can&#39;t spread across AZ Security groups - Statful ACL - Stateless . CIDR . IP Address - 4 section of 8 bits 10.0.0.0/16 10.0.0.1 - First 10.0.255.254 - Last 2^(32-16) - Number of addres - 65K 255.255.0.0 - netmask 10.0.1.0/24 10.0.1.1 - First 10.0.1.254 - Last 2^(32-24) - Number of addres - 256 255.255.255.0 - netmask /28 - smallest in Amazon VPC . Default VPC . All subnet have route out to the internet Each EC2 instance have both a public &amp; private ip address . VPC Peering . Connect one VPC with other via direct network route using ip addresses Instances behave as if they were on same private network Can do peering across AWS accounts No transitive peering Can peer across region . Lab . When we create VPC, below all also gets created Route Table Security Group Network ACL Internet Gateway tied to VPN Amazon reserve 5 ip address within subnets . NAT . Network Addres Translation - Allow private subnet to communicate to Internet NAT Instance - single EC2 instance Disable source/destination check Must be on public subnet Behind a security group NAT Gateway Redundant inside AZ Start at 5 Gbps &amp; scale currently to 45 Gbps No need to patch Not associated with Secuity groups Automatically assigned a public ip address Edit route table to use NAT . Network ACL . Default ACL which gets created with VPN allows everything Deny everything by default when created new NACL Specify Inbound &amp; Outbound rule Rule apply in numerical order Block individual Ip address . ELB . Application LB Atleast two public subnet must be speified Network LB Classic LB . VPC Flow Logs . Capture information about IP information going to &amp; from network interface in VPC Flow Logs data is stored using CloudWatch Logs Can be stored at 3 levels VPC Subnet Network Interface Level Can&#39;t change flow log configuration once created Peer VPC need to be in same account for enabling Flow Logs Not all traffic is monitored . Bastions Host . Special purpose computer on a network specially designed &amp; configured to withstand attacks. SSH or RDP to private subnet through it Jump Boxes in Australia . Direct Connect . Establish a dedicated network connection between on premise to AWS . Global Accelerator . Direct traffic to optimal endpoints over the AWS global network Improves availability &amp; performance of internet applications that are used by global audience By defualt provides two static IP addresses Accelerator DNS Name Network Zone Listener Endpoint group Endpoint . VPC End Points . Enables you to privately connect VPC to supported AWS services &amp; VPC endpoints services powered by PrivateLink without requiring an internet gateway, NAT devices, VPN connection or AWS Direct Connect connection. Instances in VPC does not require public ip addresses to communicate with the resources in the service End points are virtual devices. They are horizontally scaled, redundant &amp; highly avaliable VPC components that allow commuinication between instances in your VPC &amp; services without imposing availability risks or bandwidth constraint on your network traffic. Two types Interface End Point Elastic network interface with a private IP address that serves as an entry point for traffic designated to a supported service. Gateway End Point Amazon S3 DynamoDB . HA Architecture . Load Balancer . Application LB Operate at level 7 &amp; are application aware Network LB Best suited for TCP traffic where extreme performance is required Operating at level 4 Classic LB Legacy ELB - Balance HTTP/HTTPS application &amp; use Layer-7 specific feature such as X-Forwarded &amp; sticky sessions. Also use strict level 4 balancing for applications that rely on TCP protocol Cost effective . Lab . Never get ip address for ELB . Advanced ELB . Sticky Session Allow you to bind user to particular EC2 instances Cross Zone Load Balancing Cross balance across AZ Path Pattern Create a listener with rules to forward requests based on the url path. . Autoscaling . Groups Logical components - Webserver groups , application group or database groups Configuration Template Groups uses launch template or launch configuration as a configuration template for its EC2 instances. Scaling Options Configure a group to scale based on the occurence of specified conditions or schedule Maintain current instance levela at all times Scale manually Scale based on a schedule Scale based on demand Use predictive scaling . HA Architecture . Use mutiple AZ &amp; multiple regions Multi-AZ for DR and Read Replicas for RDS Scaling out &amp; scaling up . Cloud Formation . Way of completely scripting your cloud environment . Elastic Beanstalk . Quickly deploy &amp; manage applications in the AWS Cloud without worrying about the infrastucture that runs those applications. Beanstalk does capacity provisions, load balancing, scaling &amp; application health monitoring. . Applications . SQS - Simple Queue Service . Web service that gives access to a message queue Message can contain up to 256 KB of text in any format. Can be kept from 1 minute to 14 days (default 4 days) Pull based Type of queue Standard best effort ordering more than 1 copy of message might be delivered out of ordered FIFO Only once Order maintained Limited to 300 transactions per second Visibility Timeout Amout of time message is invisible after a reader picks up that message. Maximum is 12 hours Polling Short - return immediately Long - Doesn&#39;t return a response until message arrives in the message queue or timeout . SWF - Simple Workflow Service . Web service that coordinate work across distributed application components Task oriented Manually interwention can happen Workflow executions can last for 1 year SWF Actors Workflow Starter - Application that can initiate the workflow Decider - Control the flow of activity task in a workflow execution. Activity Workers - Carry out the activity tasks . SNS - Simple Notification Service . Web service that makes it easy to set up, operate &amp; send notification from the cloud. Push model In expensive pay as you go model SNS Topic . Elastic Transcoder . Convert media files format . API Gateway . Makes it easy to publish, maintain, monitor &amp; secure API at any scale. Expose HTTPS endpoints to define a Restful API Serverless-ly connect with Lambda &amp; DynamoDB Send each API endpoint to a different target Configure Define an API Define resources &amp; nested resources For each resource Select supported HTTP method Set security Choose Target Set request &amp; response API Caching Same Origin Policy Web browser permits scripts contained in a first page to access data in a second web page but only if both web pages have the same origin CORS Mechanism that allows restricted resources(fonts) on a web page to be requested from another domain outside the domain from which the first resource was served. . Kinesis . Platform on AWS to send streaming data to. Easy to load &amp; analyse streaming data. Retention - 24 hours to 7 days Types Streams Shards Firehose Lambda can be running Data is not persistent Analytics S3 / Redshift / Elastic search cluster . Web Identity Federation - Cognito . User Pools Users can sign in directly Cognito acts as Identity Broker between the Identity Provider &amp; AWS. Identity Pools Provide temporary AWS credentials to access AWS services like S3 or DynamoDB . Serverless . Lambda . Compute service where you can code &amp; create a lambda function. Event Driven In reponse to http request Pricing Number of requests Duration Scales out automatically .",
            "url": "https://ankushagarwal87.github.io/continuouslearning/aws/2020/06/20/AWS-Certified-Solutions-Architect-Associate.html",
            "relUrl": "/aws/2020/06/20/AWS-Certified-Solutions-Architect-Associate.html",
            "date": " • Jun 20, 2020"
        }
        
    
  
    
        ,"post10": {
            "title": "12 Factor App",
            "content": "I. Codebase . One codebase tracked in revision control, many deploys Multiple apps sharing the same code is a violation of twelve-factor. The solution here is to factor shared code into libraries which can be included through the dependency manager. A deploy is a running instance of the app. This is typically a production site, and one or more staging sites. Observations: Done for all apps . II. Dependencies . Explicitly declare and isolate dependencies The full and explicit dependency specification is applied uniformly to both production and development. Questions: Check if any app uses any server dependency for execution How easy/difficult to migrate it to another server Can we just run build command to do local setup Tivoli agent on server ? Data Source configuration ? Observations: Maven take care of dependency in Java Virtual env in Python . III. Config . Store config in the environment Strict separation of config from code. Config varies substantially across deploys, code does not. The twelve-factor app stores config in environment variables (often shortened to env vars or env). Env vars are easy to change between deploys without changing any code; unlike config files, there is little chance of them being checked into the code repo accidentally; and unlike custom config files, or other config mechanisms such as Java System Properties, they are a language- and OS-agnostic standard. Based on environment application itself point to correct setting Questions: How to manage environment properties, we generally don&#39;t track them in codebase Should we keep all properties in codebase with suffix ? Observations: Generally done for environment related properties . IV. Backing services . Treat backing services as attached resources A backing service is any service the app consumes over the network as part of its normal operation. Examples include datastores (such as MySQL or CouchDB), messaging/queueing systems (such as RabbitMQ or Beanstalkd),SMTP services for outbound email (such as Postfix), and caching systems (such as Memcached). To the app, both are attached resources, accessed via a URL or other locator/credentials stored in the config. A deploy of the twelve-factor app should be able to swap out a local MySQL database with one managed by a third party (such as Amazon RDS) without any changes to the app’s code. Observations: Generally done for all database, queue . V. Build, release, run . Strictly separate build and run stages The twelve-factor app uses strict separation between the build, release, and run stages. For example, it is impossible to make changes to the code at runtime, since there is no way to propagate those changes back to the build stage. Observations: Generally done for all apps . VI. Processes . Execute the app as one or more stateless processes Twelve-factor processes are stateless and share-nothing. Any data that needs to persist must be stored in a stateful backing service, typically a database. The twelve-factor app never assumes that anything cached in memory or on disk will be available on a future request or job Some web systems rely on “sticky sessions” – that is, caching user session data in memory of the app’s process and expecting future requests from the same visitor to be routed to the same process. Sticky sessions are a violation of twelve-factor and should never be used or relied upon. Session state data is a good candidate for a datastore that offers time-expiration, such as Memcached or Redis. Observation: Generally done for all apps . VII. Port binding . Export services via port binding The twelve-factor app is completely self-contained and does not rely on runtime injection of a webserver into the execution environment to create a web-facing service The web app exports HTTP as a service by binding to a port, and listening to requests coming in on that port. Spring Boot, apart from many other benefits, provides us with a default embedded application server. Hence, the JAR we generated earlier using Maven is fully capable of executing in any environment just by having a compatible Java runtime Observations: Work fine for Sprint Boot application - don&#39;t need any runtime container . VIII. Concurrency . Scale out via the process model Application must also be able to span multiple processes running on multiple physical machines. The share-nothing, horizontally partitionable nature of twelve-factor app processes means that adding more concurrency is a simple and reliable operation. Observation: Genrally done for all handler applications Question: How to achieve it in Batch mode . IX. Disposability . Maximize robustness with fast startup and graceful shutdown The twelve-factor app’s processes are disposable, meaning they can be started or stopped at a moment’s notice. This facilitates fast elastic scaling, rapid deployment of code or config changes, and robustness of production deploys. The application should expose idempotent services. This gives the flexibility to stop, move, or spin new services at any time without any other considerations. Observations: Generally done for all applications Question: If any handler is processing request from queue will it stay in queue or thrown away. . X. Dev/prod parity . Keep development, staging, and production as similar as possible The time gap: A developer may work on code that takes days, weeks, or even months to go into production. The personnel gap: Developers write code, ops engineers deploy it. The tools gap: Developers may be using a stack like Nginx, SQLite, and OS X, while the production deploy uses Apache, MySQL, and Linux The twelve-factor app is designed for continuous deployment by keeping the gap between development and production small. Looking at the three gaps described above: Make the time gap small: a developer may write code and have it deployed hours or even just minutes later. Make the personnel gap small: developers who wrote code are closely involved in deploying it and watching its behavior in production. Make the tools gap small: keep development and production as similar as possible. All deploys of the app (developer environments, staging, production) should be using the same type and version of each of the backing services. Observation: Time gap can be improved . XI. Logs . Treat logs as event streams A twelve-factor app never concerns itself with routing or storage of its output stream. It should not attempt to write to or manage logfiles. Instead, each running process writes its event stream, unbuffered, to stdout. During local development, the developer will view this stream in the foreground of their terminal to observe the app’s behavior. The capture, storage, curation, and archival of such stream should be handled by the execution environment. To begin with, we can use SLF4J to handle logging abstractly within our application. Moreover, we can use a tool like Fluentd to collect the stream of logs from applications and backing services. This we can feed into Elasticsearch for storage and indexing. Finally, we can generate meaningful dashboards for visualization in Kibana. Observations: Generally application log data Question: What are the alternative to achieve this. . XII. Admin processes . Run admin/management tasks as one-off processes The twelve-factor methodology strongly suggests keeping such admin scripts together with the application codebase. In doing so, it should follow the same principles as we apply to the main application codebase. It&#39;s also advisable to use a built-in REPL tool of the execution environment to run such scripts on production servers. .",
            "url": "https://ankushagarwal87.github.io/continuouslearning/12%20factor%20app/design/2020/06/20/Factor-App.html",
            "relUrl": "/12%20factor%20app/design/2020/06/20/Factor-App.html",
            "date": " • Jun 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "I like to keep myself updated with the latest trends &amp; enjoy exploring new tecnologies. Feel free to reach out at https://www.linkedin.com/in/ankushagarwal87/ .",
          "url": "https://ankushagarwal87.github.io/continuouslearning/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ankushagarwal87.github.io/continuouslearning/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}